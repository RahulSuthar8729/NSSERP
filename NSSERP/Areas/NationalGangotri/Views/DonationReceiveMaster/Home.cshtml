@using System.Security.Claims;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Mvc.TagHelpers;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using System.IO;
@model NSSERP.Areas.NationalGangotri.Models.DonationReceiveMaster;
@{
    ViewData["Title"] = "DonationReceiveMaster";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="..." crossorigin="anonymous" />
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="..."></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="..."></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="..."></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    <style>
        .card-header.sticky-top {
            background-color: #fff; /* Set a background color for the sticky header */
            z-index: 1000; /* Set a higher z-index to ensure it appears above other elements */
            border-bottom: 1px solid #dee2e6; /* Add a border to separate it from the content */
        }
    </style>
    @section scripts {
        <script>
            function convertToUpperCase(input) {
                input.value = input.value.toUpperCase();
            }
        </script>
        <script>
            $(document).ready(function () {
                $('#submitButton').click(function (event) {
                    // Prevent the default form submission
                    event.preventDefault();

                    // Trigger HTML5 form validation
                    $('#donationForm')[0].reportValidity();

                    // Check if the form is valid
                    if ($('#donationForm')[0].checkValidity()) {
                        // If valid, submit the form
                        $('#donationForm').submit();
                    } else {
                        // If not valid, focus on the first invalid field
                        $('#donationForm :invalid').first().focus();
                    }
                });
            });
        </script>

    }
</head>
<body>
    <div class="card">
        @if (Model.msg != null || Model.msg != "")
        {
            ViewBag.msg = Model.msg;
        }
        <div class="card-header">
            <div class="row">
                <div class="col text-left">
                    <h5>
                        <span style="color:#1cb8a1">@User.FindFirst("Department")?.Value.ToUpper() DONATION RECEIVE </span>
                        <span style="color:#28166f">MASTER</span>
                    </h5>
                </div>
                <div class="col text-left">
                    <h5>
                        <span style="color:#1cb8a1">INDIAN GANGOTRI</span>
                    </h5>
                </div>
                <div class="col-2 text-right">
                    <a title="Go Back Home" href="/Gangotri/Home" class="btn btn-warning"><i class="fas fa-arrow-left"></i> Back</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <form id="donationForm" action="/NationalGangotri/DonationReceiveMaster/Home" enctype="multipart/form-data" method="post">
                @Html.AntiForgeryToken()
                <div class="col-lg-3">

                    <div class="form-check form-check-inline">
                        <input class="form-check-input" id="IsReceiveHeadDiffrent" name="IsReceiveHeadDiffrent" type="checkbox" value="true" @(Model.IsReceiveHeadDiffrent.GetValueOrDefault() ? "checked" : "") />
                        <label class="form-check-label" for="IsReceiveHeadDiffrent">
                            <span style="color: darkblue; font-weight: bold">Is ReceiveHead Different</span>
                        </label>
                    </div>


                    <script>
                        // Using jQuery for simplicity, ensure you include jQuery in your project
                        $(document).ready(function () {
                            // Function to show/hide divReceiveHead based on checkbox state
                            function toggleDivBasedOnCheckboxState() {
                                if ($('#IsReceiveHeadDiffrent').is(':checked')) {
                                    $('#divReceiveHead').show();
                                    $('#ReceiveHeadName').focus(); // Focus on a specific element, adjust this according to your actual structure
                                } else {
                                    $('#divReceiveHead').hide();
                                }
                            }

                            // Show/hide divReceiveHead based on checkbox state when the page loads
                            toggleDivBasedOnCheckboxState();

                            // Attach change event to the checkbox
                            $('#IsReceiveHeadDiffrent').change(function () {
                                toggleDivBasedOnCheckboxState();
                            });
                        });
                    </script>

                </div>
                <br />
                <fieldset>
                    <legend style="font-weight:bold;" class="card">Receive Details</legend>
                    <div class="row">
                        <div id="divReceiveHead" class="col-lg-3" style="display: none;">
                            <div class="form-group">
                                <label for="receivehead">Receive Head</label>


                                <div class="input-group">
                                    <select class="custom-select" id="ReceiveHeadName" name="ReceiveHeadID" asp-for="ReceiveHeadID">
                                        <option value="" selected disabled>Select Receive Head</option>
                                        @foreach (var receivehead in Model.ReceiveHeadList)
                                        {
                                            <option value="@receivehead.ReceiveHeadID" data-receiveheadname="@receivehead.ReceiveHeadName">
                                                @receivehead.ReceiveHeadName
                                            </option>
                                        }
                                    </select>
                                    <input type="hidden" name="ReceiveHeadName" asp-for="ReceiveHeadName" id="receiveHeadHidden" />
                                    <script>
                                        $("#ReceiveHeadName").change(function () {
                                            var selectedReceiveHeadName = $(this).find("option:selected").data("receiveheadname");
                                            $("#receiveHeadHidden").val(selectedReceiveHeadName); // Use data("receiveheadname") if you change it to data-receiveheadname
                                        });

                                        // Set the selected item based on model's ReceiveHeadID
                                        var modelReceiveHeadID = '@Model.ReceiveHeadID'; // Convert to string for comparison
                                        if (modelReceiveHeadID) {
                                            $("#ReceiveHeadName").val(modelReceiveHeadID);
                                            $("#ReceiveHeadName").trigger("change"); // Trigger the change event to update the hidden field
                                        }
                                    </script>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="Receive ID">Receive ID</label>
                                <input type="text" disabled class="form-control" id="ReceiveID" value="@Model.ReceiveID" asp-for="ReceiveID" name="ReceiveID">
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="Receive Date">Receive Date</label>
                                <input type="text" disabled value="@Model.ReceiveDate.ToString("dd-MM-yyyy")" class="form-control" id="ReceiveDate" asp-for="ReceiveDate" name="ReceiveDate">
                            </div>

                            <script>
                                $(document).ready(function () {
                                    // Apply Select2 to your dropdown element by its ID
                                    $('#ID').select2();
                                    $('#headInput').select2();
                                    $('#Instruction').select2();
                                });

                            </script>
                            <div class="form-group col-lg-3">
                                <label for="ID">Receive in Event:</label>

                                <select class="form-control" id="ID" name="ID" asp-for="ID">
                                    <option value="" selected disabled>Select Event</option>
                                    @foreach (var eventlist in Model.ReceiveInEventList)
                                    {
                                        <option value="@eventlist.ID" data-eventname="@eventlist.EventName">
                                            @eventlist.EventName
                                        </option>
                                    }
                                </select>
                                <input type="hidden" name="EventName" asp-for="EventName" id="EventNameHidden" />
                                <script>
                                    $("#ID").change(function () {
                                        var selectedEventName = $(this).find("option:selected").data("eventname");
                                        $("#EventNameHidden").val(selectedEventName);
                                    });

                                    var modelID = parseInt('@Model.ReceiveInEventID'); // Convert to number
                                    // Convert to string for comparison
                                    if (modelID) {
                                        $("#ID").val(modelID);
                                        $("#ID").trigger("change"); // Trigger the change event to update the hidden field
                                    }
                                </script>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="Campaign">Campaign</label>
                                <select class="custom-select" asp-for="" id="Campaign" name="CampaignID">
                                    <option value="" selected disabled>Select</option>
                                    @if (Model != null)
                                    {
                                        foreach (var mod in Model.campaignlist)
                                        {
                                            <option value="@mod.REF_ID" data-campaignname="@mod.CampaignName">@mod.CampaignName</option>
                                        }
                                    }
                                </select>
                                <input type="hidden" name="CampaignName" asp-for="CampaignName" id="CampaignNamehideen" />
                            </div>

                            <script>
                                $("#Campaign").change(function () {
                                    var selectedEventName = $(this).find("option:selected").data("campaignname");
                                    $("#CampaignNamehideen").val(selectedEventName);
                                });

                                var modelID = parseInt('@Model.CampaignID'); // Convert to number
                                // Convert to string for comparison
                                if (modelID) {
                                    $("#Campaign").val(modelID);
                                    $("#Campaign").trigger("change"); // Trigger the change event to update the hidden field
                                }
                            </script>
                            <div class="form-group col-lg-3">
                                <label for="">Donor ID</label>
                                <input class="form-control" placeholder="Please enter the donor ID to fetch donor data." id="DonorID" value="@Model.DonorID" asp-for="DonorID" name="DonorID" />
                            </div>

                            <script>
                                $(document).ready(function () {
                                    $('#DonorID').blur(function () {
                                        var enteredDonorID = $(this).val();
                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetDataByDonorID',
                                            type: 'GET',
                                            data: { donorID: enteredDonorID },
                                            success: function (response) {
                                                if (response != null) {
                                                    var jsonData = JSON.parse(response.data);

                                                    // Populate form fields with JSON data
                                                    // Populate form fields with JSON data
                                                    selectOptionByText('#NamePrefix', jsonData.NamePrefix);

                                                    // Function to select option in a select element based on text
                                                    function selectOptionByText(selectId, text) {
                                                        var select = $(selectId);

                                                        // Check if text is defined before using trim
                                                        if (text !== undefined && text !== null) {
                                                            text = text.trim();
                                                        }

                                                        select.find('option:contains("' + text + '")').prop('selected', true);
                                                    }

                                                    selectOptionByText('#PrefixToFullName', jsonData.PrefixToFullName);
                                                    $('#FullName').val(jsonData.FullName);
                                                    $('#RelationToFullName').val(jsonData.RelationToFullName);

                                                    // Format date using moment.js (make sure to include moment.js in your project)
                                                    $('#DateOfBirth').val(moment(jsonData.DateOfBirth).format('YYYY-MM-DD'));

                                                    $('#Company').val(jsonData.Company);
                                                    $('#FullAddress').val(jsonData.FullAddress);
                                                    $('#PinCode1').val(jsonData.PinCode);
                                                    $('#CountryID').val(jsonData.CountryID);


                                                    var pinCodeMaster = JSON.parse(jsonData.pinCodeMasterList);

                                                    // Bind the StateID dropdown
                                                    $('#StateID').empty().append('<option value="' + pinCodeMaster.StateID + '">' + pinCodeMaster.StateName + '</option>');

                                                    // Populate District dropdown
                                                    $('#DistrictID').empty().append('<option value="' + pinCodeMaster.DistrictID + '">' + pinCodeMaster.DistrictName + '</option>');

                                                    // Populate City dropdown
                                                    $('#CityID').empty().append('<option value="' + pinCodeMaster.CityID + '">' + pinCodeMaster.CityName + '</option>');
                                                    $('#EmailID').val(jsonData.EmailID);
                                                    $('#StdCode').val(jsonData.StdCode);
                                                    $('#PhoneR').val(jsonData.PhoneR);
                                                    $('#IsPermanentAddressDiff').prop('checked', jsonData.IsPermanentAddressDiff);

                                                    // Bind the mobile numbers table
                                                    bindMobileNumbersTable(jsonData.MobileListJson);

                                                    // Bind the identity details
                                                    bindIdentityDetails(jsonData.IdentityListJson);
                                                } else {
                                                    console.log("No data found for the entered DonorID");
                                                }
                                            },
                                            // ... (rest of your code)
                                        });
                                    });

                                    // Function to select option in a select element based on text
                                    function selectOptionByText(selectId, text) {
                                        var select = $(selectId);

                                        // Check if text is defined before using trim
                                        if (text !== undefined && text !== null) {
                                            text = text.trim();
                                        }

                                        select.find('option:contains("' + text + '")').prop('selected', true);
                                    }
                                    // Function to bind the mobile numbers table
                                    function bindMobileNumbersTable(mobileListJson) {
                                        var mobileNumbersTable = $("#mobileNumbersTable tbody");
                                        mobileNumbersTable.empty(); // Clear existing rows

                                        // Parse the JSON string in mobileListJson if it's a string
                                        var mobileList = Array.isArray(mobileListJson) ? mobileListJson : JSON.parse(mobileListJson);


                                        if (mobileList && mobileList.length > 0) {
                                            // Loop through each item in the JSON array
                                            $.each(mobileList, function (index, item) {
                                                // Add a new row to the table
                                                var newRow = $("<tr>");
                                                newRow.append("<td>" + item.CountryCode + "</td>");
                                                newRow.append("<td>" + item.MobileNumber + "</td>");
                                                newRow.append("<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>");

                                                // Add a special class to identify rows from MobileListJson
                                                newRow.addClass("json-data-row");

                                                mobileNumbersTable.append(newRow);
                                            });

                                            // Show the table
                                            $("#mobileNumbersTable").css("visibility", "visible");
                                        }
                                    }
                                    // Function to bind the identity details
                                    function bindIdentityDetails(identityListJson) {
                                        var addedIdentities = $("#addedIdentities");

                                        // Clear existing identities
                                        addedIdentities.empty();

                                        // Check if identityListJson is not an empty string
                                        if (identityListJson.trim() === "") {
                                            return;
                                        }

                                        // Parse the JSON string in identityListJson
                                        var identityList = Array.isArray(identityListJson) ? identityListJson : JSON.parse(identityListJson);

                                        if (identityList && identityList.length > 0) {
                                            // Loop through each item in the JSON array
                                            $.each(identityList, function (index, identity) {
                                                // Create a new row for the added identity
                                                var newRow = $("<div class='form-group col-lg-3'>");
                                                newRow.append("<label for='" + identity.identityType + "'>" + identity.identityType + "</label>");
                                                newRow.append("<input class='form-control' id='" + identity.identityType + "' type='text' value='" + identity.identityNumber + "' readonly />");
                                                newRow.append("<button class='btn btn-danger btn-sm delete-identity'>Delete</button>");

                                                // Append the new row to the container
                                                addedIdentities.append(newRow);

                                                // Show the added identities section
                                                addedIdentities.css("display", "flex");
                                            });

                                            // Update the hidden field value with the current identities after binding
                                            updateHiddenField();
                                        }
                                    }

                                    // Function to update the hidden field with the current identities displayed in the UI
                                    function updateHiddenField() {
                                        var currentIdentities = [];

                                        // Loop through each item in the addedIdentities section
                                        $("#addedIdentities .form-group").each(function () {
                                            var identityType = $(this).find("label").text();
                                            var identityNumber = $(this).find("input").val();

                                            currentIdentities.push({
                                                IdentityType: identityType,
                                                IdentityNumber: identityNumber
                                            });
                                        });

                                        // Update the hidden field value with the current identities as a JSON string
                                        $("#identityDetails").val(JSON.stringify(currentIdentities));
                                    }



                                });
                            </script>



                            <div class="form-group col-lg-6">
                                <label for="responsefrom">Enter Search Data</label>
                                <input placeholder="Search data using Aadhaar, PAN, driving license, mobile number, or other identity numbers." class="form-control" id="" />
                            </div>
                            <div class="from-group col-lg-2">
                                <br />
                                <a asp-action="" title="Search" asp-controller="Gangotri" class="btn btn-primary"><i class="fas fa-search "></i>Search</a>
                            </div>
                        </div>

                    </div>
                </fieldset>

                <fieldset>
                    <legend style="font-weight:bold;" class="card">Personal Details</legend>

                    <div class="nested-form-container">
                        <div class="row">

                            <div class="form-group col-lg-3">
                                <label for="InMemory">In Memory/Occession</label>
                                <textarea class="form-control" id="InMemory" name="InMemory" asp-for="InMemory" rows="1">@Model.InMemory</textarea>
                            </div>
                            <div class="form-group col-md-3">
                                <label for="FullName" class="mb-2">Full Name<span style="color: red;">*</span></label>
                                <div class="input-group">
                                    <!-- Prefix Selection Dropdown -->
                                    <div class="input-group-prepend">
                                        <select class="custom-select" id="NamePrefix" required name="NamePrefix" asp-for="NamePrefix">
                                            <option value="" selected disabled>Select</option>
                                            <option value="Mr." @(Model != null && Model.NamePrefix == "Mr." ? "selected" : "")>Mr.</option>
                                            <option value="Mrs." @(Model != null && Model.NamePrefix == "Mrs." ? "selected" : "")>Mrs.</option>
                                        </select>

                                    </div>

                                    <input type="text" value="@Model.FullName" required class="form-control" asp-for="FullName" placeholder="PRASANT KUMAR AGRAWAL" id="FullName" name="FullName" oninput="convertToUpperCase(this)">
                                </div>
                            </div>


                            <div class="form-group col-lg-3">
                                <label for="Reference" class="mb-2">S/o/D/oW/o</label>
                                <div class="input-group">
                                    <!-- Prefix Selection Dropdown -->
                                    <div class="input-group-prepend">
                                        <select class="custom-select" id="PrefixToFullName" asp-for="PrefixToFullName" name="PrefixToFullName">
                                            <option value="" selected disabled>Select</option>
                                            <option value="S/o" @(Model != null && Model.PrefixToFullName == "S/o" ? "selected" : "")>S/o</option>
                                            <option value="D/o" @(Model != null && Model.PrefixToFullName == "D/o" ? "selected" : "")>D/o</option>
                                            <option value="W/o" @(Model != null && Model.PrefixToFullName == "W/o" ? "selected" : "")>W/o</option>
                                            <!-- Add more options as needed -->
                                        </select>
                                    </div>

                                    <!-- Reference Input -->
                                    <input type="text" value="@Model.RelationToFullName" oninput="convertToUpperCase(this)" class="form-control" id="RelationToFullName" name="RelationToFullName">
                                </div>
                            </div>


                            <div class="form-group col-lg-3">
                                <label for="Dateofbirth">Date Of Birth <span style="color: red;">*</span></label>
                                <input type="date" required value="@Model.DateOfBirth?.ToString("yyyy-MM-dd")" class="form-control" id="DateOfBirth" asp-for="DateOfBirth" name="DateOfBirth">
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="">Company</label>
                                <input type="text" name="Company" value="@Model.Company" class="form-control" oninput="convertToUpperCase(this)" id="Company" asp-for="Company">
                            </div>

                        </div>
                    </div>
                </fieldset>
                <fieldset>
                    <legend style="font-weight:bold;" class="card">Letter Communication Address Details</legend>

                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-9">
                                <label for="Address1">Full Address<span style="color: red;">*</span></label>
                                <textarea required class="form-control" name="FullAddress" asp-for="FullAddress" oninput="convertToUpperCase(this)" placeholder="483,SEVADHAM SEWA NAGAR,SEC.4 HIRAN MAGRI" id="FullAddress" rows="1">@Model.FullAddress</textarea>
                                <div style="color:#28166f;font-weight:bold" id="suggestions"></div>
                            </div>

                            <script>
                                function suggestAddress(input) {
                                    var suggestions = document.getElementById('suggestions');

                                    // Clear previous suggestions
                                    suggestions.innerHTML = '';

                                    // Address format suggestions based on user input
                                    if (input.toLowerCase().includes('h')) {
                                        addSuggestion('House');
                                    }
                                    if (input.toLowerCase().includes('b')) {
                                        addSuggestion('Building');
                                    }
                                    if (input.toLowerCase().includes('f')) {
                                        addSuggestion('Flat');
                                    }
                                    if (input.toLowerCase().includes('a')) {
                                        addSuggestion('Apartment');
                                    } if (input.toLowerCase().includes('s')) {
                                        addSuggestion('Sector');
                                    }
                                    // Add more suggestions based on your criteria

                                    // Display suggestions
                                    function addSuggestion(suggestion) {
                                        var suggestionElement = document.createElement('div');
                                        suggestionElement.innerText = suggestion;
                                        suggestionElement.addEventListener('click', function () {
                                            document.getElementById('Address1').value += ' ' + suggestion;
                                            suggestions.innerHTML = ''; // Clear suggestions after selecting
                                        });
                                        suggestions.appendChild(suggestionElement);
                                    }
                                }
                            </script>

                            <div class="form-group col-lg-3">
                                <label for="PinCode">PinCode<span style="color: red;">*</span></label>
                                <input type="text" value="@Model.PinCode" required id="PinCode1" name="PinCode" asp-for="PinCode" class="form-control" />
                            </div>
                            <script>
                                $(document).ready(function () {
                                    // Function to handle pin code change
                                    function handlePinCodeChange(enteredPinCode) {
                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetLocationDetailsByPinCode',
                                            type: 'GET',
                                            data: { pincode: enteredPinCode },
                                            success: function (response) {
                                                // Parse the nested JSON string inside the 'data' property
                                                var jsonData = JSON.parse(response.data);

                                                // Access the correct property names
                                                $('#CountryID').val(jsonData.CountryID);

                                                // Populate State dropdown
                                                $('#StateID').empty().append('<option value="' + jsonData.StateID + '">' + jsonData.StateName + '</option>');

                                                // Populate District dropdown
                                                $('#DistrictID').empty().append('<option value="' + jsonData.DistrictID + '">' + jsonData.DistrictName + '</option>');

                                                // Populate City dropdown
                                                $('#CityID').empty().append('<option value="' + jsonData.CityID + '">' + jsonData.CityName + '</option>');
                                                $('#countryCode').val(jsonData.CountryID);

                                                // If the value is not in the dropdown, set it to an empty string
                                                if ($('#countryCode').val() == null) {
                                                    $('#countryCode').val('');
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error);
                                            }
                                        });
                                    }

                                    // Trigger blur event if the initial pin code has a value
                                    var initialPinCode = $('#PinCode1').val();
                                    if (initialPinCode) {
                                        handlePinCodeChange(initialPinCode);
                                    }

                                    // Bind blur event for PinCode input
                                    $('#PinCode1').blur(function () {
                                        var enteredPinCode = $(this).val();
                                        handlePinCodeChange(enteredPinCode);
                                    });

                                    // Write additional logic here for the change events if needed
                                });

                            </script>

                            <div class="form-group col-lg-3">
                                <label for="CountryID">Country<span style="color: red;">*</span></label>
                                <select class="form-control" required id="CountryID" asp-for="CountryID" name="CountryID">
                                    <option value="" selected disabled>Select Country</option>
                                    @if (Model != null)
                                    {
                                        @foreach (var country in Model.CountryList)
                                        {
                                            <option value="@country.CountryId" data-countryname="@country.CountryName">@country.CountryName</option>
                                        }
                                    }
                                </select>
                                <input type="hidden" name="CountryName" asp-for="CountryName" id="country1hidden" />
                                <script>
                                    $(document).ready(function () {
                                        // Function to set selected item and update hidden field
                                        function setSelectedCountry() {
                                            var selectedCountryName = $("#CountryId").find("option:selected").data("countryname");
                                            $("#country1hidden").val(selectedCountryName);
                                            $('#countryCode').val($("#CountryId").val());
                                        }

                                        // Attach change event to the dropdown
                                        $("#CountryId").change(function () {
                                            setSelectedCountry();
                                        });

                                        // Set the selected item based on model's CountryID when the page loads
                                        var modelCountryID = parseInt('@Model.CountryId'); // Convert to number
                                        // Convert to string for comparison
                                        if (modelCountryID) {
                                            $("#CountryID").val(modelCountryID);
                                            setSelectedCountry(); // Update the hidden field
                                        }
                                    });
                                </script>
                            </div>



                            <script>
                                $(document).ready(function () {
                                    // Set the initial state of the currency dropdown
                                    updateCurrencyDropdown();

                                    // Handle change event on the country dropdown
                                    $("#CountryID").on("change", function () {
                                        updateCurrencyDropdown();
                                    });

                                    function updateCurrencyDropdown() {
                                        // Get the selected country's currency ID
                                        var selectedCountryCurrencyID = $("#CountryID option:selected").data("currency-id");

                                        // Set the currency dropdown to the country's currency ID
                                        $("#CurrencyID").val(selectedCountryCurrencyID);
                                    }
                                });
                            </script>

                            <div class="form-group col-lg-3">
                                <label for="StateID">State<span style="color: red;">*</span></label>
                                <select class="form-control" required asp-for="StateID" id="StateID" name="StateID">
                                    <option value="" selected disabled>Select State</option>
                                </select>
                            </div>

                            <script>
                                $(document).ready(function () {
                                    $('#CountryID').change(function () {
                                        var selectedCountryId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetStatesByCountry',
                                            type: 'GET',
                                            data: { countryId: selectedCountryId },
                                            success: function (response) {
                                                var data = JSON.parse(response.data);
                                                // Clear and populate state dropdown with retrieved states
                                                $('#StateID').empty().append('<option value="" selected disabled>Select State</option>');
                                                $.each(data, function (index, state) {
                                                    $('#StateID').append('<option value="' + state.StateId + '">' + state.StateName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });
                                    });
                                });
                            </script>



                            <div class="form-group col-lg-3">
                                <label for="DistrictID">District<span style="color: red;">*</span></label>
                                <select class="form-control" required asp-for="DistrictID" id="DistrictID" name="DistrictID">
                                    <option value="" selected disabled>Select District</option>
                                </select>
                            </div>

                            <script>
                                $(document).ready(function () {
                                    $('#StateID').change(function () {
                                        var selectedStateId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetDistrictsByState',
                                            type: 'GET',
                                            data: { stateId: selectedStateId },
                                            success: function (response) {
                                                var districtData = JSON.parse(response.data);
                                                // Clear and populate district dropdown with retrieved districts
                                                $('#DistrictID').empty().append('<option value="" selected disabled>Select District</option>');
                                                $.each(districtData, function (index, district) {
                                                    $('#DistrictID').append('<option value="' + district.DistrictID + '">' + district.DistrictName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });

                                        // Also, trigger an AJAX request here to fetch cities based on the selected state if needed
                                    });
                                });
                            </script>


                            <script>
                                $(document).ready(function () {
                                    $('#DistrictID').change(function () {
                                        var selectedDistrictId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetCitiesByDistrictID',
                                            type: 'GET',
                                            data: { districtId: selectedDistrictId },
                                            success: function (response) {
                                                var data = JSON.parse(response.data);
                                                // Populate city dropdown with retrieved cities
                                                $('#CityID').empty().append('<option value="" selected disabled>Select City</option>');
                                                $.each(data, function (index, city) {
                                                    $('#CityID').append('<option value="' + city.CityID + '">' + city.CityName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });
                                    });
                                });
                            </script>



                            <div class="form-group col-lg-3">
                                <label for="CityID">City<span style="color: red;">*</span></label>
                                <select class="form-control" required asp-for="CityID" id="CityID" name="CityID">
                                    <option value="" selected disabled>Select City</option>
                                </select>
                            </div>

                            <div class="card-header text-center">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" id="updation" name="IfUpdationInAddress" type="checkbox" value="true" @(Model.IfUpdationInAddress.GetValueOrDefault() ? "checked" : "") />
                                    <label class="form-check-label" for="updation"> If Updation in Addressing</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" name="IsPermanentAddressDiff" value="true" id="sameasabove" @(Model.IsPermanentAddressDiff.GetValueOrDefault() ? "checked" : "") />
                                    <label class="form-check-label" for="sameasabove">Is Permanent Address Different</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" name="IfDetailsNotComplete" value="true" id="detailsnot" @(Model.IfDetailsNotComplete.GetValueOrDefault() ? "checked" : "") />
                                    <label class="form-check-label" for="detailsnot">If Details Not Complete</label>
                                </div>
                            </div>


                        </div>
                    </div>
                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            // Function to toggle visibility based on checkbox state
                            function togglePermanentAddress() {
                                var permanentAddressFieldset = document.getElementById('permanentAddressFieldset');
                                var isDifferentCheckbox = document.getElementById('sameasabove');

                                // Check if the checkbox is checked
                                if (isDifferentCheckbox.checked) {
                                    permanentAddressFieldset.style.display = 'block';  // Show the fieldset
                                } else {
                                    permanentAddressFieldset.style.display = 'none';   // Hide the fieldset
                                }
                            }

                            // Attach the function to the checkbox change event
                            document.getElementById('sameasabove').addEventListener('change', togglePermanentAddress);

                            // Initial call to set the initial state on page load
                            togglePermanentAddress();
                        });
                    </script>
                </fieldset>

                <fieldset id="permanentAddressFieldset" style="display: none;">
                    <legend style="font-weight:bold;" class="card">
                        Permanent Address Details
                    </legend>

                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-9">
                                <label for="Address1">Full Address</label>
                                <textarea class="form-control" oninput="convertToUpperCase(this)" placeholder="483,SEVADHAM SEWA NAGAR,SEC.4 HIRAN MAGRI" id="Address1" asp-for="P_FullAddress" name="P_FullAddress" rows="1">@Model.P_FullAddress</textarea>
                                <div style="color:#28166f;font-weight:bold" id="suggestions"></div>
                            </div>

                            <script>
                                function suggestAddress(input) {
                                    var suggestions = document.getElementById('suggestions');

                                    // Clear previous suggestions
                                    suggestions.innerHTML = '';

                                    // Address format suggestions based on user input
                                    if (input.toLowerCase().includes('h')) {
                                        addSuggestion('House');
                                    }
                                    if (input.toLowerCase().includes('b')) {
                                        addSuggestion('Building');
                                    }
                                    if (input.toLowerCase().includes('f')) {
                                        addSuggestion('Flat');
                                    }
                                    if (input.toLowerCase().includes('a')) {
                                        addSuggestion('Apartment');
                                    } if (input.toLowerCase().includes('s')) {
                                        addSuggestion('Sector');
                                    }
                                    // Add more suggestions based on your criteria

                                    // Display suggestions
                                    function addSuggestion(suggestion) {
                                        var suggestionElement = document.createElement('div');
                                        suggestionElement.innerText = suggestion;
                                        suggestionElement.addEventListener('click', function () {
                                            document.getElementById('Address1').value += ' ' + suggestion;
                                            suggestions.innerHTML = ''; // Clear suggestions after selecting
                                        });
                                        suggestions.appendChild(suggestionElement);
                                    }
                                }
                            </script>

                            <div class="form-group col-lg-3">
                                <label for="PinCode">PinCode</label>
                                <input type="text" value="@Model.P_PinCode" id="PinCode2" name="P_PinCode" asp-for="P_PinCode" class="form-control" />
                            </div>
                            <script>
                                $(document).ready(function () {
                                    // Function to handle pin code change
                                    function handlePinCodeChange(enteredPinCode, countryID) {
                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetLocationDetailsByPinCode',
                                            type: 'GET',
                                            data: { pinCode: enteredPinCode },
                                            success: function (response) {
                                                // Parse the nested JSON string inside the 'data' property
                                                var jsonData = JSON.parse(response.data);

                                                // Populate Country dropdown
                                                $('#CountryID2').val(jsonData.CountryID);

                                                // Populate State dropdown
                                                $('#StateID2').empty().append('<option value="' + jsonData.StateID + '">' + jsonData.StateName + '</option>');

                                                // Populate District dropdown
                                                $('#DistrictID2').empty().append('<option value="' + jsonData.DistrictID + '">' + jsonData.DistrictName + '</option>');

                                                // Populate City dropdown
                                                $('#CityID2').empty().append('<option value="' + jsonData.CityID + '">' + jsonData.CityName + '</option>');
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error);
                                            }
                                        });
                                    }

                                    // Trigger blur event if the initial pin code has a value
                                    var initialPinCode2 = $('#PinCode2').val();
                                    if (initialPinCode2) {
                                        handlePinCodeChange(initialPinCode2);
                                    }

                                    // Bind blur event for PinCode2 input
                                    $('#PinCode2').blur(function () {
                                        var enteredPinCode2 = $(this).val();
                                        handlePinCodeChange(enteredPinCode2);
                                    });

                                    // Write additional logic here for the change events if needed
                                });

                            </script>

                            <div class="form-group col-lg-3">
                                <label for="CountryID">Country:</label>
                                <select class="form-control" id="CountryID2" asp-for="CountryID" name="CountryID">
                                    <option value="" selected disabled>Select Country</option>
                                    @if (Model != null)
                                    {
                                        @foreach (var country in Model.CountryList)
                                        {
                                            <option value="@country.CountryId">@country.CountryName</option>
                                        }

                                    }
                                </select>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="StateID">State</label>
                                <select class="form-control" id="StateID2" name="StateID">
                                    <option value="" selected disabled>Select State</option>
                                </select>
                            </div>
                            <script>
                                $(document).ready(function () {
                                    $('#CountryID2').change(function () {
                                        var selectedCountryId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetStatesByCountry',
                                            type: 'GET',
                                            data: { countryId: selectedCountryId },
                                            success: function (response) {
                                                var data = JSON.parse(response.data);
                                                // Clear and populate state dropdown with retrieved states
                                                $('#StateID2').empty().append('<option value="" selected disabled>Select State</option>');
                                                $.each(data, function (index, state) {
                                                    $('#StateID2').append('<option value="' + state.StateId + '">' + state.StateName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });
                                    });
                                });
                            </script>


                            <div class="form-group col-lg-3">
                                <label for="DistrictID">District</label>
                                <select class="form-control" id="DistrictID2" name="DistrictID">
                                    <option value="" selected disabled>Select District</option>
                                </select>
                            </div>

                            <script>
                                $(document).ready(function () {
                                    $('#StateID2').change(function () {
                                        var selectedStateId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetDistrictsByState',
                                            type: 'GET',
                                            data: { stateId: selectedStateId },
                                            success: function (response) {
                                                var districtData = JSON.parse(response.data);
                                                // Clear and populate district dropdown with retrieved districts
                                                $('#DistrictID2').empty().append('<option value="" selected disabled>Select District</option>');
                                                $.each(districtData, function (index, district) {
                                                    $('#DistrictID2').append('<option value="' + district.DistrictID + '">' + district.DistrictName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });

                                        // Also, trigger an AJAX request here to fetch cities based on the selected state if needed
                                    });
                                });
                            </script>


                            <script>
                                $(document).ready(function () {
                                    $('#DistrictID2').change(function () {
                                        var selectedDistrictId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetCitiesByDistrictID',
                                            type: 'GET',
                                            data: { districtId: selectedDistrictId },
                                            success: function (response) {
                                                var data = JSON.parse(response.data);
                                                // Populate city dropdown with retrieved cities
                                                $('#CityID2').empty().append('<option value="" selected disabled>Select City</option>');
                                                $.each(data, function (index, city) {
                                                    $('#CityID2').append('<option value="' + city.CityID + '">' + city.CityName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });
                                    });
                                });
                            </script>



                            <div class="form-group col-lg-3">
                                <label for="CityID">City</label>
                                <select class="form-control" id="CityID2" name="CityID">
                                    <option value="" selected disabled>Select City</option>
                                </select>
                            </div>


                        </div>
                    </div>

                </fieldset>

                <fieldset>
                    <legend style="font-weight:bold;" class="card">Contact Details</legend>

                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="mobileNumber" class="mr-2">Mobile/WhatsApp No.<span style="color: red;">*</span></label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <select class="form-control" id="countryCode" asp-for="CountryCode" name="CountryCode">
                                            <option value="" selected disabled>Select</option>
                                            @if (Model != null)
                                            {

                                                @foreach (var countrycode in Model.CountryList)
                                                {
                                                    <option value="@countrycode.CountryId">@countrycode.CountryCode</option>
                                                }

                                            }
                                        </select>

                                    </div>
                                    <script>
                                        $(document).ready(function () {
                                            // Attach change event to the Country dropdown
                                            $("#CountryID").change(function () {
                                                // Get the selected Country ID
                                                var selectedCountryId = $(this).val();

                                                // Set the corresponding Country Code in the second dropdown
                                                $("#countryCode").val(selectedCountryId);
                                            });
                                        });
                                    </script>
                                    <input type="text" class="form-control" id="mobileNumber" name="mobileNumber" placeholder="Enter your number">
                                    <div class="input-group-append">
                                        <button class="btn btn-primary" type="button" id="addNumber"><i class="fas fa-plus"></i>Add</button>
                                    </div>
                                </div>
                            </div>
                            <table class="table table-bordered col-lg-3" style="visibility: hidden;" id="mobileNumbersTable">
                                <thead>
                                    <tr>
                                        <th>Country Code</th>
                                        <th>Mobile Number</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Table rows will be dynamically added here -->
                                </tbody>
                            </table>
                            <input type="hidden" asp-for="MobileList" name="MobileList" id="mobileListField" />
                            <script>
                                $(document).ready(function () {
                                    $("#submitButton").on("click", function () {
                                        var tableDatamobile = [];

                                        // Loop through each row in the table
                                        $("#mobileNumbersTable tbody tr").each(function () {
                                            var rowData = {};
                                            $(this).find("td").each(function (index, element) {
                                                if (index === 0) {
                                                    rowData.CountryCode = $(element).text();
                                                } else if (index === 1) {
                                                    rowData.MobileNumber = $(element).text();
                                                }
                                            });
                                            tableDatamobile.push(rowData);
                                        });

                                        // Store the JSON data in the hidden input field
                                        $("#mobileListField").val(JSON.stringify(tableDatamobile));
                                    });
                                });

                            </script>
                            <script>
                                $(document).ready(function () {
                                    // Parse the JSON data from the model
                                    var mobileListJson = @Html.Raw(Model.MobileListJson);

                                    // If MobileListJson is null, use data from the model directly
                                    if (!mobileListJson) {
                                        // Use data from the model
                                        mobileListJson = @Html.Raw(JsonConvert.SerializeObject(Model.MobileList));
                                    }

                                    if (mobileListJson) {
                                        // Loop through each item in the JSON array
                                        $.each(mobileListJson, function (index, item) {
                                            // Add a new row to the table
                                            var newRow = $("<tr>");
                                            newRow.append("<td>" + item.CountryCode + "</td>");
                                            newRow.append("<td>" + item.MobileNumber + "</td>");
                                            newRow.append("<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>");

                                            // Add a special class to identify rows from MobileListJson
                                            newRow.addClass("json-data-row");

                                            $("#mobileNumbersTable tbody").append(newRow);

                                            // Show the table
                                            $("#mobileNumbersTable").css("visibility", "visible");
                                        });
                                    }

                                    // Add Number button click event
                                    $("#addNumber").on("click", function () {
                                        // Get values from input fields
                                        var countryCode = $("#countryCode").find(':selected').text();
                                        var mobileNumber = $("#mobileNumber").val();

                                        // Validate mobile number format based on the country code
                                        var mobileNumberPattern;

                                        // Check if the country code is +91 (India)
                                        if (countryCode === '+91') {
                                            mobileNumberPattern = /^\d{10}$/; // 10 digits for India
                                        } else {
                                            // For other countries, remove validation or add specific validation patterns
                                            mobileNumberPattern = /^\d+$/; // Example: Any number of digits
                                        }

                                        if (!mobileNumberPattern.test(mobileNumber)) {
                                            alert("Invalid mobile number format for the selected country code.");
                                            return;
                                        }

                                        // Rest of your existing code...

                                        // Add a new row to the table
                                        var newRow = $("<tr>");
                                        newRow.append("<td>" + countryCode + "</td>");
                                        newRow.append("<td>" + mobileNumber + "</td>");
                                        newRow.append("<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>");

                                        // Add a special class to identify manually added rows
                                        newRow.addClass("manual-data-row");

                                        $("#mobileNumbersTable tbody").append(newRow);

                                        // Show the table
                                        $("#mobileNumbersTable").css("visibility", "visible");

                                        // Clear input fields
                                        $("#mobileNumber").val("");
                                    });

                                    // Delete row when the delete button is clicked
                                    $("#mobileNumbersTable").on("click", ".delete-row", function () {
                                        var row = $(this).closest("tr");

                                        // Remove the row
                                        row.remove();

                                        // Hide the table if no rows are left
                                        if ($("#mobileNumbersTable tbody tr").length === 0) {
                                            $("#mobileNumbersTable").css("visibility", "hidden");
                                        }
                                    });
                                });
                            </script>


                        </div>
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="EmailID">Email ID<span style="color: red;">*</span></label>
                                <input class="form-control" value="@Model.EmailID" type="text" id="EmailID" required name="EmailID" asp-for="EmailID" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="StdCode">STD Code</label>
                                <input class="form-control" id="StdCode" value="@Model.StdCode" type="text" name="StdCode" asp-for="StdCode" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="Phoneno">Phone (R)</label>
                                <input class="form-control" id="PhoneR" value="@Model.PhoneR" type="text" name="PhoneR" asp-for="PhoneR" />
                            </div>

                        </div>
                    </div>
                </fieldset>

                <fieldset>
                    <legend style="font-weight:bold;" class="card">Identity Details</legend>
                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="IdentityType">Identity Type</label>
                                <select class="form-control" id="identityType">
                                    <option value="0">Select</option>
                                    <option value="Aadhar">Aadhar</option>
                                    <option value="PAN">PAN</option>
                                    <option value="Passport">Passport</option>
                                    <option value="DrivingLicence">Driving Licence</option>
                                    <option value="RationCard">Ration Card</option>
                                    <option value="VoterID">Voter ID</option>
                                    <option value="TaxID">Tax Identification</option>
                                    <!-- Add more identity types as needed -->
                                </select>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="IdentityNumber">Identity Number</label>
                                <input class="form-control" id="identityNumber" type="text" name="" />
                            </div>
                            <script>
                                $(document).ready(function () {
                                    // Add an event listener for identity type change
                                    $('#identityType').change(function () {
                                        // Get the selected identity type
                                        var selectedIdentityType = $(this).val();

                                        // Set the watermark text based on the selected identity type
                                        var watermarkText = getWatermarkText(selectedIdentityType);

                                        // Apply the watermark to the identity number input
                                        $('#identityNumber').attr('placeholder', watermarkText);
                                    });

                                    // Function to get watermark text based on identity type
                                    function getWatermarkText(identityType) {
                                        switch (identityType) {
                                            case 'Aadhar':
                                                return 'Enter Aadhar Number';
                                            case 'PAN':
                                                return 'Enter PAN Number';
                                            case 'Passport':
                                                return 'Enter Passport Number';
                                            case 'DrivingLicence':
                                                return 'Enter Driving Licence Number';
                                            case 'RationCard':
                                                return 'Enter Ration Card Number';
                                            case 'VoterID':
                                                return 'Enter Voter ID Number';
                                            case 'TaxID':
                                                return 'Enter Tax Identification Number';
                                            default:
                                                return 'Enter Identity Number';
                                        }
                                    }
                                });
                            </script>
                            <div class="form-group col-lg-3">
                                <br />
                                <button class="btn btn-primary" type="button" id="addIdentity"><i class="fas fa-plus"></i>Add Identity</button>
                            </div>
                        </div>

                        <div class="row" id="addedIdentities" style="display: none;">
                            <!-- Added identities will be dynamically inserted here -->
                        </div>
                    </div>
                </fieldset>
                <input type="hidden" id="identityDetails" name="IdentityList" asp-for="IdentityList" />

                <script>
                    $(document).ready(function () {
                        var identityListJson = @Html.Raw(Model.IdentityListJson);

                        // If IdentityListJson is null, use data from the model directly
                        if (!identityListJson) {
                            // Use data from the model
                            identityListJson = @Html.Raw(JsonConvert.SerializeObject(Model.IdentityList));
                        }

                        if (identityListJson) {
                            // Log the parsed JSON for debugging
                            console.log("Parsed Identity List:", identityListJson);

                            // Loop through each item in the JSON array
                            $.each(identityListJson, function (index, identity) {
                                // Log each identity for debugging
                                console.log("Identity:", identity);

                                // Ensure that identityType and identityNumber are accessed correctly
                                var type = identity.identityType;
                                var number = identity.identityNumber;

                                var existingIdentities = JSON.parse($("#identityDetails").val() || '[]');

                                // Add the new identity to the array
                                existingIdentities.push(identity);

                                // Set the JSON stringified identities to the hidden input
                                $("#identityDetails").val(JSON.stringify(existingIdentities));

                                // Create a new row for the added identity
                                var newRow = $("<div class='form-group col-lg-3'>");
                                newRow.append("<label for='" + identity.identityType + "'>" + identity.identityType + "</label>");
                                newRow.append("<input class='form-control' id='" + identity.identityType + "' type='text' value='" + identity.identityNumber + "' readonly />");
                                newRow.append("<button class='btn btn-danger btn-sm delete-identity'>Delete</button>");

                                // Append the new row to the container
                                $("#addedIdentities").append(newRow);

                                // Show the added identities section
                                $("#addedIdentities").css("display", "flex");
                            });

                            // Update the hidden field value with the existing identities
                            updateHiddenField(identityListJson);

                            // Show the added identities section
                            $("#addedIdentities").css("display", "flex");
                        }

                        $("#addIdentity").on("click", function () {
                            // Get selected identity type and number
                            var selectedIdentityType = $("#identityType").val();
                            var identityNumber = $("#identityNumber").val().trim();

                            // Validate input and identity number based on type
                            var isValid = validateIdentity(selectedIdentityType, identityNumber);

                            if (!isValid) {
                                return;
                            }

                            // Check if an identity of the same type already exists
                            var existingIdentities = JSON.parse($("#identityDetails").val() || '[]');
                            var existingIdentity = existingIdentities.find(function (identity) {
                                return identity.IdentityType === selectedIdentityType;
                            });

                            if (existingIdentity) {
                                alert("Identity of type " + selectedIdentityType + " already exists. You cannot add it again.");
                                return;
                            }

                            // Create a new object for the added identity
                            var identity = {
                                IdentityType: selectedIdentityType,
                                IdentityNumber: identityNumber
                            };

                            // Append the new identity to the container
                            appendIdentityToContainer(identity);

                            // Update the hidden field value with the updated identities
                            updateHiddenField();

                            // Clear input fields
                            $("#identityType").val("0");
                            $("#identityNumber").val("");
                            $("#identityNumber").attr("placeholder", "");
                        });

                        // Delete Identity button click event
                        $(document).on("click", ".delete-identity", function (event) {
                            // Prevent the default action (e.g., form submission)
                            event.preventDefault();

                            // Your existing delete logic here...

                            // For example, you can get the parent div and remove it
                            var parentDiv = $(this).closest(".form-group");
                            parentDiv.remove();

                            // Update the hidden field value with the updated identities
                            updateHiddenField();

                            // Your existing logic to update the hidden input and other actions...
                        });

                        // Function to validate identity number based on the selected identity type
                        // Function to validate identity number based on the selected identity type
                        function validateIdentity(identityType, identityNumber) {
                            // Validate based on identity type
                            switch (identityType) {
                                case 'Aadhar':
                                    // Aadhar validation: 12 digits
                                    if (!/^\d{12}$/.test(identityNumber)) {
                                        alert("Invalid Aadhar number format. Please enter 12 digits.");
                                        return false;
                                    }
                                    break;
                                case 'PAN':
                                    // PAN validation: Uppercase letters and numbers, total 10 characters
                                    if (!/^[A-Z]{5}\d{4}[A-Z]{1}$/.test(identityNumber)) {
                                        alert("Invalid PAN number format. Please enter a valid PAN.");
                                        return false;
                                    }
                                    break;
                                // Add more cases for other identity types if needed
                            }

                            // Validation passed
                            return true;
                        }


                        // Function to append an identity to the addedIdentities section
                        function appendIdentityToContainer(identity) {
                            // Collect existing identities from the hidden field
                            var existingIdentities = JSON.parse($("#identityDetails").val() || '[]');

                            // Add the new identity to the array
                            existingIdentities.push(identity);

                            // Set the JSON stringified identities to the hidden input
                            $("#identityDetails").val(JSON.stringify(existingIdentities));

                            // Create a new row for the added identity
                            var newRow = $("<div class='form-group col-lg-3'>");
                            newRow.append("<label for='" + identity.IdentityType + "'>" + identity.IdentityType + "</label>");
                            newRow.append("<input class='form-control' id='" + identity.IdentityType + "' type='text' value='" + identity.IdentityNumber + "' readonly />");
                            newRow.append("<button class='btn btn-danger btn-sm delete-identity'>Delete</button>");

                            // Append the new row to the container
                            $("#addedIdentities").append(newRow);

                            // Show the added identities section
                            $("#addedIdentities").css("display", "flex");
                        }

                        // Function to update the hidden field value with the current identities
                        function updateHiddenField() {
                            var currentIdentities = [];

                            // Loop through each item in the addedIdentities section
                            $("#addedIdentities .form-group").each(function () {
                                var identityType = $(this).find("label").text();
                                var identityNumber = $(this).find("input").val();

                                currentIdentities.push({
                                    IdentityType: identityType,
                                    IdentityNumber: identityNumber
                                });
                            });

                            // Update the hidden field value with the current identities
                            $("#identityDetails").val(JSON.stringify(currentIdentities));
                        }
                    });


                </script>
                <fieldset>
                    <legend style="font-weight:bold;" class="card">Donation Details</legend>

                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="Prov. No">Prov. No<span style="color: red;">*</span></label>
                                <input class="form-control" value="@Model.ProvNo" required id="ProvNo" type="text" name="ProvNo" asp-for="ProvNo" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="Prov. Date">Prov. Date<span style="color: red;">*</span></label>
                                <input class="form-control" value="@Model.ProvDate?.ToString("yyyy-MM-dd")" required id="ProvDate" type="date" name="ProvDate" asp-for="ProvDate" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="">Person Name</label>
                                <input class="form-control" value="@Model.PersonName" id="PersonName" type="text" name="PersonName" asp-for="PersonName" />
                            </div>
                            <div class="form-group col-lg-3">
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="PaymentMode">Donation Mode<span style="color: red;">*</span></label>
                                <select id="PaymentMode" required class="form-control" name="PaymentMode" asp-for="PaymentMode" onchange="toggleMaterialFields()">
                                    <option value="" selected disabled>Select Donation Mode</option>
                                    @if (Model != null)
                                    {
                                        foreach (var paymentmode in Model.paymentModeList)
                                        {
                                            <option value="@paymentmode.PaymentModeID" data-paymentmode="@paymentmode.PaymentModeName" @(Model.PaymentModeID == paymentmode.PaymentModeID ? "selected" : "")>@paymentmode.PaymentModeName</option>
                                        }
                                    }
                                </select>
                                <input type="hidden" id="hdnpaymentmode" name="PaymentModeName" asp-for="PaymentModeName" />
                                <!-- Include a hidden field for PaymentModeID -->
                                <input type="hidden" id="hdnpaymentmodeid" name="PaymentModeID" asp-for="PaymentModeID" />

                                <script>
                                    $(document).ready(function () {
                                        var modelPaymentModeID = parseInt('@Model.PaymentModeID');
                                        if (modelPaymentModeID) {
                                            $("#PaymentMode").val(modelPaymentModeID);
                                        }

                                        // Attach the change event to update the hidden fields
                                        $("#PaymentMode").change(function () {
                                            var selectedOption = $(this).find("option:selected");
                                            var paymentModeName = selectedOption.data("paymentmode");
                                            var paymentModeID = selectedOption.val();

                                            $("#hdnpaymentmode").val(paymentModeName);
                                            $("#hdnpaymentmodeid").val(paymentModeID);
                                        });
                                    });
                                </script>
                            </div>
                            <script>
                                $(document).ready(function () {
                                    $('#Amount').on('blur', function () {
                                        validateAmount();
                                    });

                                    function updateTotalAmount() {
                                        var selectedPaymentMode = $('#PaymentMode option:selected').data('paymentmode');
                                        var amount = parseFloat($('#Amount').val()) || 0;

                                        if (selectedPaymentMode === 'CASH') {
                                            $('#TotalAmount').val(amount.toFixed(2)); // Set the TotalAmount only when Cash is selected
                                        }
                                    }

                                    function validateAmount() {
                                        var selectedPaymentMode = $('#PaymentMode option:selected').data('paymentmode');
                                        var amount = parseFloat($('#Amount').val()) || 0;

                                        if (selectedPaymentMode === 'CASH' && amount > 200000) {
                                            alert('Amount cannot be more than 2 lac for Cash payment mode.');
                                            // Clear the input field
                                            $('#Amount').val('');
                                        }

                                        updateTotalAmount(); // Call updateTotalAmount to set TotalAmount if necessary
                                    }
                                });
                            </script>

                            <div class="form-group col-lg-3" id="currencyAmountFields">
                                <label for="currency" class="mb-2">Currency<span style="color: red;">*</span></label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <select class="custom-select" asp-for="CurrencyID" id="CurrencyID" name="CurrencyID" required>
                                            <option value="" disabled>Select</option>
                                            @foreach (var currency in Model.currenciesList)
                                            {
                                                <option value="@currency.CurrencyID" data-currencycode="@currency.CurrencyCode" @(Model.CurrencyID == currency.CurrencyID ? "selected" : "")>@currency.CurrencyCode</option>
                                            }
                                        </select>
                                        <input type="hidden" id="hdncurrncycode" name="CurrencyCode" asp-for="CurrencyCode" />

                                        <script>
                                            $(document).ready(function () {
                                                // Set the selected item based on model's CurrencyID when the page loads
                                                var modelCurrencyID = '@Model.CurrencyID'; // Convert to string for comparison
                                                if (modelCurrencyID) {
                                                    $("#CurrencyID").val(modelCurrencyID);
                                                }

                                                // Attach the change event to update the hidden field
                                                $("#CurrencyID").change(function () {
                                                    var selectedItem = $(this).find("option:selected").data("currencycode");
                                                    $("#hdncurrncycode").val(selectedItem);
                                                });
                                            });
                                        </script>
                                    </div>



                                    <!-- Amount Input -->
                                    <input type="text" placeholder="Amount" asp-for="Amount" name="Amount" class="form-control" id="Amount">
                                </div>
                            </div>
                            <div class="form-group col-lg-3" id="materialDepositFields" style="display: none;">
                                <label for="MaterialDepositID">Material Deposit ID<span style="color: red;">*</span></label>
                                <input class="form-control" value="@Model.MaterialDepositID" id="MaterialDepositID" type="text" name="MaterialDepositID" asp-for="MaterialDepositID" required />
                            </div>

                            <div class="form-group col-lg-3" id="materialFields" style="display: none;">
                                <label for="materialInput">Material Description<span style="color: red;">*</span></label>
                                <textarea class="form-control" oninput="convertToUpperCase(this)" id="materialInput" rows="2" name="Material" asp-for="Material" required>@Model.Material</textarea>
                            </div>
                            <div class="form-group col-lg-3" id="DivTotalAmount" style="display: none;">
                                <label for="Amount">Total Amount</label>
                                <input readonly class="form-control" value="@Model.TotalAmount" id="TotalAmount" type="text" name="TotalAmount" asp-for="TotalAmount" />
                            </div>

                            <script>
                                function toggleMaterialFields() {
                                    var paymentModeDropdown = document.getElementById('PaymentMode');
                                    var materialDepositFields = document.getElementById('materialDepositFields');
                                    var materialFields = document.getElementById('materialFields');
                                    var currencyAmountFields = document.getElementById('currencyAmountFields');
                                    var materialDepositIDTextbox = document.getElementById('MaterialDepositID');
                                    var materialInputTextarea = document.getElementById('materialInput');
                                    var currencyDropdown = document.getElementById('CurrencyID');
                                    var amountInput = document.getElementById('Amount');
                                    var divbankdetails = document.getElementById('divbankdetails');
                                    var TotalAmount = document.getElementById('DivTotalAmount');
                                    // Get the selected text instead of the value
                                    var selectedText = paymentModeDropdown.options[paymentModeDropdown.selectedIndex].text;

                                    // Check if the selected text is "MATERIAL"
                                    if (selectedText === 'MATERIAL') {
                                        materialDepositFields.style.display = 'block';
                                        materialFields.style.display = 'block';
                                        currencyAmountFields.style.display = 'none';
                                        TotalAmount.style.display = 'none';
                                        // Set required attribute dynamically
                                        materialDepositIDTextbox.required = true;
                                        materialInputTextarea.required = true;
                                        currencyDropdown.required = false;
                                        amountInput.required = false;
                                        materialDepositIDTextbox.focus(); // Focus on Material Deposit ID textbox

                                    } else {
                                        materialDepositFields.style.display = 'none';
                                        materialFields.style.display = 'none';
                                        currencyAmountFields.style.display = 'block';
                                        TotalAmount.style.display = 'block';
                                        // Remove required attribute dynamically
                                        materialDepositIDTextbox.required = false;
                                        materialInputTextarea.required = false;
                                        currencyDropdown.required = true;
                                        amountInput.required = true;

                                    }
                                    if (selectedText === 'MATERIAL' || selectedText === 'CASH') {

                                        divbankdetails.style.display = 'none';
                                    }
                                    else {
                                        divbankdetails.style.display = 'block';
                                    }
                                }

                                // Call the function initially to set the initial state
                                toggleMaterialFields();
                            </script>
                            <script>
                                $(document).ready(function () {
                                    // ... Your existing code ...

                                    $("#submitButton").click(function (event) {
                                        event.preventDefault();

                                        var tableData = [];
                                        $("#bankDetailsTable tbody tr").each(function () {
                                            var rowData = {
                                                DonationMode: $(this).find("td:eq(0)").text(),
                                                BankName: $(this).find("td:eq(1)").text(),
                                                ChequeDate: $(this).find("td:eq(2)").text(),
                                                ChequeNo: $(this).find("td:eq(3)").text(),
                                                DepositBank: $(this).find("td:eq(4)").text(),
                                                DepositDate: $(this).find("td:eq(5)").text(),
                                                Currency: $(this).find("td:eq(6)").text(),
                                                Amount: $(this).find("td:eq(7)").text(),
                                                PdcCheque: $(this).find("td:eq(8)").text()
                                            };
                                            tableData.push(rowData);
                                        });

                                        // Store tableData in a hidden field
                                        $("#hiddenBankDetails").val(JSON.stringify(tableData));

                                        // Submit the form
                                        $("#yourFormId").submit();
                                    });

                                    // ... Your existing code ...
                                });
                            </script>

                            <div id="divbankdetails" style="display:none;">
                                <div class="row">
                                    <div class="form-group col-lg-3">
                                        <label for="bankName">Bank Name</label>
                                        <select class="form-control" name="BankID" id="BankID1" asp-for="BankID">
                                            <option value="" selected disabled>Select Bank</option>
                                            @if (Model != null)
                                            {


                                                @foreach (var bank in Model.bankmasterlist)
                                                {
                                                    <option value="@bank.BankID">@bank.BankName</option>
                                                }

                                            }
                                        </select>
                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="chequedate">Cheque/Draft Date</label>
                                        <input class="form-control" id="chequedate" type="date" name="chequedate" />
                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="cheuqueno">Cheque/Draft No</label>
                                        <input class="form-control" id="cheuqueno" type="text" name="cheuqueno" />
                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="depositBank">Deposit Bank</label>
                                        <select class="form-control" name="BankID" id="BankID2" asp-for="BankID">
                                            <option value="" selected disabled>Select Bank</option>
                                            @if (Model != null)
                                            {


                                                @foreach (var bank in Model.bankmasterlist)
                                                {
                                                    <option value="@bank.BankID">@bank.BankName</option>
                                                }

                                            }
                                        </select>
                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="depositDate">Deposit Date</label>
                                        <input class="form-control" id="depositDate" type="date" name="depositDate" />
                                    </div>
                                    <div class="form-group col-lg-1">
                                        <br />
                                        <button class="btn btn-primary" id="BtnAddBankDetails"><i class="fa fa-plus"></i>Add</button>
                                    </div>
                                    <input type="hidden" asp-for="BankDetailsList" name="BankDetailsList" id="hiddenBankDetails" />
                                </div>
                            </div>

                            <script>
                                $(document).ready(function () {
                                    $('#depositDate').on('blur', function () {
                                        validateDepositDate();
                                    });

                                    function validateDepositDate() {
                                        var depositDate = new Date($('#depositDate').val());
                                        var currentDate = new Date();

                                        // Calculate the start and end dates of the current and previous Indian financial years
                                        var currentFinancialYearStart = new Date(currentDate.getFullYear(), 3, 1); // Financial year starts on April 1st
                                        var previousFinancialYearStart = new Date(currentDate.getFullYear() - 1, 3, 1); // Start of the previous financial year
                                        var previousFinancialYearEnd = new Date(currentDate.getFullYear(), 2, 31); // End of the previous financial year

                                        if (depositDate < previousFinancialYearStart || depositDate > currentFinancialYearEnd) {
                                            alert('Receive ID cannot be credited if the deposit date is not within the current or previous Indian financial year.');
                                            // You can add additional handling here, such as clearing the date input or showing a message
                                            $('#depositDate').val(''); // Clear the date input
                                        }
                                    }
                                });
                            </script>

                            <div class="col-12">
                                <div class="table-responsive">
                                    <table class="table table-bordered" id="bankDetailsTable">
                                        <thead>
                                            <tr>
                                                <th>Donation Mode</th>
                                                <th>Bank Name</th>
                                                <th>Cheque/Draft Date</th>
                                                <th>Cheque/Draft No.</th>
                                                <th>Deposit Bank</th>
                                                <th>Deposit Date</th>
                                                <th>Currency</th>
                                                <th>Amount</th>
                                                <th>PDC Cheque</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Table rows will be added dynamically here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <style>
                                #bankDetailsTable {
                                    display: none;
                                }
                            </style>
                            <script>
                                $(document).ready(function () {

                                    // Parse the JSON data from the model for bank details
                                    var bankDetailsListJson = @Html.Raw(Model.BankDetailsListJson);

                                    // If BankDetailsListJson is null, use data from the model directly
                                    if (!bankDetailsListJson) {
                                        // Use data from the model
                                        bankDetailsListJson = @Html.Raw(JsonConvert.SerializeObject(Model.BankDetailsList));
                                    }

                                    if (bankDetailsListJson && bankDetailsListJson.length > 0) {
                                        // Loop through each item in the JSON array
                                        $.each(bankDetailsListJson, function (index, bankDetails) {
                                            // Map property names if needed
                                            var mappedBankDetails = {
                                                DonationMode: bankDetails.DonationMode,
                                                BankName: bankDetails.BankName,
                                                ChequeOrDraftDate: bankDetails.ChequeOrDraftDate,
                                                ChequeOrDraftNo: bankDetails.ChequeOrDraftNo,
                                                DepositeBankName: bankDetails.DepositeBankName,
                                                DepositeDate: bankDetails.DepositeDate,
                                                CurrencyCode: bankDetails.CurrencyCode,
                                                Amount: bankDetails.Amount,
                                                IsPdcCheque1: bankDetails.IsPdcCheque1
                                                // Add more mappings as needed
                                            };

                                            // Add a new row to the table
                                            addBankDetailsRow(mappedBankDetails);
                                        });

                                        // Show the table after adding data
                                        $("#bankDetailsTable").show();
                                    }

                                    function updateTotalAmount() {
                                        var totalAmount = 0;

                                        // Loop through each row in the bank details table
                                        $("#bankDetailsTable tbody tr").each(function () {
                                            // Get the amount from the "Amount" column in the current row
                                            var amount = parseFloat($(this).find("td:eq(7)").text());

                                            // Add the amount to the total
                                            totalAmount += amount;
                                        });

                                        // Update the Total Amount field with the calculated total
                                        $("#TotalAmount").val(totalAmount.toFixed(2));
                                    }



                                    // Flag to check if a row with a donation mode has been added
                                    var donationModeAdded = false;
                                    var addedDonationMode = null;

                                    //currency flag
                                    var currencyAdded = false;
                                    var addedcurrency = null;

                                    $("#BtnAddBankDetails").on("click", function (event) {
                                        event.preventDefault();

                                        // Get values from input fields
                                        var selectedPaymentMode = $("#PaymentMode option:selected").text();
                                        var bankName = $("#BankID1 option:selected").text();
                                        var Cheuquedate = $("#chequedate").val();
                                        var Cheuqueno = $("#cheuqueno").val();
                                        var depositBank = $("#BankID2 option:selected").text();
                                        var depositDate = $("#depositDate").val();
                                        var Currency = $("#CurrencyID option:selected").text();
                                        var amount = $("#Amount").val();

                                        // Convert Cheuquedate to a Date object
                                        var chequeDateObj = new Date(Cheuquedate);
                                        var today = new Date();

                                        var pdcCheque1;

                                        // Check if Cheuquedate is greater than today's date
                                        if (chequeDateObj > today) {
                                            pdcCheque1 = "Yes";
                                        } else {
                                            pdcCheque1 = "No";
                                        }

                                        // Check if a row with a donation mode has already been added
                                        if (donationModeAdded) {
                                            // Donation mode already added, allow adding only if the mode is the same
                                            if (selectedPaymentMode !== addedDonationMode) {
                                                alert("You can only add rows with the same donation mode.");
                                                return;
                                            }
                                        } else {
                                            // Donation mode not added yet, set the flag and added mode
                                            donationModeAdded = true;
                                            addedDonationMode = selectedPaymentMode;
                                        }

                                        if (currencyAdded) {
                                            if (Currency !== addedcurrency) {
                                                alert("You can only add rows with the same Currency.");
                                                return;
                                            }
                                        } else {
                                            // Currency not added yet, set the flag and added currency
                                            currencyAdded = true;
                                            addedcurrency = Currency;
                                        }

                                        // Add a new row to the table
                                        var bankDetails = {
                                            DonationMode: selectedPaymentMode,
                                            BankName: bankName,
                                            ChequeOrDraftDate: Cheuquedate,
                                            ChequeOrDraftNo: Cheuqueno,
                                            DepositeBankName: depositBank,
                                            DepositeDate: depositDate,
                                            CurrencyCode: Currency,
                                            Amount: amount,
                                            IsPdcCheque1: pdcCheque1
                                        };

                                        // Map property names if needed
                                        var mappedBankDetails = {
                                            DonationMode: bankDetails.DonationMode,
                                            BankName: bankDetails.BankName,
                                            ChequeOrDraftDate: bankDetails.ChequeOrDraftDate,
                                            ChequeOrDraftNo: bankDetails.ChequeOrDraftNo,
                                            DepositeBankName: bankDetails.DepositeBankName,
                                            DepositeDate: bankDetails.DepositeDate,
                                            CurrencyCode: bankDetails.CurrencyCode,
                                            Amount: bankDetails.Amount,
                                            IsPdcCheque1: bankDetails.IsPdcCheque1
                                            // Add more mappings as needed
                                        };

                                        addBankDetailsRow(mappedBankDetails);

                                        // Clear form fields
                                        $("#BankID1, #chequedate, #cheuqueno, #BankID2, #depositDate").val("");
                                        $("input[name='pdcCheque1']").prop("checked", false);

                                        updateTotalAmount();
                                        // Show the table after adding data
                                        $("#bankDetailsTable").show();
                                    });

                                    // Your existing code for handling row deletion and showing/hiding the table

                                    // Function to add a new row to the bank details table
                                    function addBankDetailsRow(bankDetails) {
                                        var newRow = "<tr>" +
                                            "<td>" + bankDetails.DonationMode + "</td>" +
                                            "<td>" + bankDetails.BankName + "</td>" +
                                            "<td>" + bankDetails.ChequeOrDraftDate + "</td>" +
                                            "<td>" + bankDetails.ChequeOrDraftNo + "</td>" +
                                            "<td>" + bankDetails.DepositeBankName + "</td>" +
                                            "<td>" + bankDetails.DepositeDate + "</td>" +
                                            "<td>" + bankDetails.CurrencyCode + "</td>" +
                                            "<td>" + bankDetails.Amount + "</td>" +
                                            "<td>" + bankDetails.IsPdcCheque1 + "</td>" +
                                            "<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>" +
                                            "</tr>";

                                        $("#bankDetailsTable tbody").append(newRow);
                                    }

                                    $("#bankDetailsTable").on("click", ".delete-row", function () {
                                        // Reset the flag and added donation mode when a row is deleted
                                        donationModeAdded = false;
                                        addedDonationMode = null;
                                        currencyAdded = false;
                                        addedcurrency = true;

                                        $(this).closest("tr").remove();
                                        updateTotalAmount();
                                        // Hide the table if there is no data after deletion
                                        if ($("#bankDetailsTable tbody tr").length === 0) {
                                            $("#bankDetailsTable").hide();
                                        }
                                    });

                                });
                            </script>
                        </div>
                    </div>
                </fieldset>
                <fieldset>
                    <legend style="font-weight: bold;" class="card">Receipt Details</legend>
                    <div class="nested-form-container">
                        <div class="row">

                            <script>
                                $(document).ready(function () {
                                    $('#headInput').change(function () {
                                        var selectedHead = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetSubHeadByHead',
                                            type: 'GET',
                                            data: { HeadID: selectedHead, DataFlag: "GANGOTRI" },
                                            success: function (response) {
                                                var data = response.data; // Extract the 'data' array from the response

                                                // Clear and populate subhead dropdown with retrieved subheads
                                                $('#subHeadInput').empty();
                                                $('#subHeadInput').append('<option value="0">Select Purpose</option>');
                                                $.each(data, function (index, head) {
                                                    $('#subHeadInput').append('<option value="' + head.yojna_ID + '">' + head.yojna + '</option>');
                                                });

                                                // Show the second dropdown if needed
                                                // $('#subHeadInput').parent().show();
                                            },
                                            error: function (xhr, status, error) {
                                                console.log("AJAX error: " + error);
                                            }
                                        });
                                    });
                                });

                            </script>



                            <script>
                                $(document).ready(function () {
                                    // Apply Select2 to your dropdown element by its ID
                                    $('#subHeadInput').select2();
                                    $('#Campaign').select2();
                                });

                            </script>

                            <div class="row">
                                <div class="form-group col-lg-3">
                                    <label for="head">Head</label>
                                    <select class="form-control" id="headInput" asp-for="Purpose_ID" name="Purpose_ID">
                                        <option value="0">Select Head</option>
                                        @if (Model != null)
                                        {
                                            @foreach (var heads in Model.HeadList)
                                            {
                                                <option value="@heads.Purpose_ID">@heads.Purpose</option>
                                            }

                                        }
                                    </select>

                                </div>

                                <div class="form-group col-lg-3">
                                    <label for="subHead">Purpose</label>
                                    <select class="form-control" id="subHeadInput" name="subHead">
                                        <option value="0">Select Purpose</option>
                                    </select>
                                </div>
                                <script>
                                    $(document).ready(function () {
                                        $('#subHeadInput').change(function () {
                                            var yojnaid = $(this).val();

                                            $.ajax({
                                                url: '/NationalGangotri/DonationReceiveMaster/GetQtyAmtBySubHead',
                                                type: 'GET',
                                                data: { YojnaID: yojnaid, DataFlag: "GANGOTRI" },
                                                success: function (response) {
                                                    // Parse the JSON string in response.data
                                                    var data = JSON.parse(response.data);

                                                    // Process the parsed data
                                                    $('#autoQuantityInput').empty(); // Clear existing options
                                                    $.each(data, function (index, head) {
                                                        $('#autoQuantityInput').append('<option value="' + head.Yojna_id + '">' + head.Amt + '</option>');
                                                    });

                                                    // You might need to select a default option or handle selection logic here

                                                    // You can set ReceiptAmount to the first value's Amt
                                                    if (data.length > 0) {
                                                        $('#ReceiptAmount').val(data[0].Amt);
                                                    } else {
                                                        $('#ReceiptAmount').val(''); // Clear the value if data is not available
                                                    }
                                                },
                                                error: function (xhr, status, error) {
                                                    console.log("AJAX error: " + error);
                                                }
                                            });
                                        });
                                    });


                                </script>


                                <div class="form-group col-lg-2">
                                    <label for="autoQuantity">Quantity</label>
                                    <select class="form-control" id="autoQuantityInput" name="autoQuantity">
                                        <option value="0">Select Quantity</option>
                                    </select>
                                </div>

                                <div class="form-group col-lg-2">
                                    <label for="ReceiptAmount">Amount</label>
                                    <input class="form-control" readonly id="ReceiptAmount" type="text" name="ReceiptAmount">
                                </div>

                                <div class="form-group col-lg-1">
                                    <br>
                                    <button class="btn btn-primary" id="addBtnReceipt"><i class="fas fa-plus"></i>Add</button>
                                </div>
                            </div>

                            <div id="tableContainer" style="display: none;">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Head</th>
                                            <th>Purpose</th>
                                            <th>Quantity</th>
                                            <th>Amount</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="dataTableBody"></tbody>
                                </table>
                            </div>

                            <input type="hidden" id="jsonData" name="receiptdetailslist" asp-for="receiptdetailslist" />

                            <script>
                                $(document).ready(function () {
                                    var tableBody = $("#dataTableBody");
                                    var tableContainer = $("#tableContainer");
                                    var jsonDataField = $("#jsonData");
                                    var totalAmountInput = $("#TotalAmount");

                                    // Constants
                                    var SELECT_OPTION = "Select";
                                    var ERROR_MESSAGES = {
                                        ADD_AMOUNT_FIRST: "Please Add Donation Amount First.",
                                        FILL_ALL_FIELDS: "Please fill in all fields before adding.",
                                        TOTAL_AMOUNT_EXCEED: "Total amount in the Purpose cannot exceed the specified Donation Total Amount...!!!"
                                    };

                                    // Initialize table with data from the model
                                    var receiptsListJson = @Html.Raw(Model.ReceiptsListJson);
                                    if (receiptsListJson) {
                                        $.each(receiptsListJson, function (index, item) {
                                            addTableRow(item.HeadName, item.Purpose, item.Quantity, item.Amount);
                                        });
                                        toggleTableVisibility();
                                    }

                                    // Add row event handler
                                    $("#addBtnReceipt").click(function () {
                                        event.preventDefault();
                                        var head = $("#headInput option:selected").text();
                                        var purpose = $("#subHeadInput option:selected").text();
                                        var quantity = $("#autoQuantityInput").val();
                                        var amount = parseFloat($("#ReceiptAmount").val()) || 0;
                                        var TotalDonation = parseFloat(totalAmountInput.val()) || 0;

                                        // Check if the sum of amounts is not greater than TotalAmount
                                        var currentTotal = getCurrentTotalAmount();
                                        var materialDepositId = $("#MaterialDepositID").val();

                                        if (materialDepositId) {
                                            if (isValidInputs(purpose, quantity, amount)) {
                                                addTableRow(head, purpose, quantity, amount);
                                                clearInputFields();
                                                updateHiddenField();
                                            }
                                            return;
                                        }

                                        if (!TotalDonation || TotalDonation <= 0) {
                                            totalAmountInput.focus();
                                            alert(ERROR_MESSAGES.ADD_AMOUNT_FIRST);
                                        } else if ((currentTotal + amount) <= TotalDonation) {
                                            // Proceed with adding a new row
                                            if (isValidInputs(purpose, quantity, amount)) {
                                                addTableRow(head, purpose, quantity, amount);
                                                clearInputFields();
                                                updateHiddenField();
                                            }
                                        } else {
                                            totalAmountInput.focus();
                                            alert(ERROR_MESSAGES.TOTAL_AMOUNT_EXCEED);
                                        }
                                    });

                                    // Delete row event handler
                                    tableBody.on("click", ".deleteBtn", function () {
                                        // Remove the corresponding row when the delete button is clicked
                                        $(this).closest("tr").remove();

                                        // Toggle table visibility based on row count
                                        toggleTableVisibility();

                                        // Update hidden field with JSON data
                                        updateHiddenField();
                                    });

                                    $("#clearTableBtn").click(function () {
                                        tableBody.empty();
                                        toggleTableVisibility();

                                        // Update hidden field with JSON data
                                        updateHiddenField();
                                    });

                                    // Function to update the hidden field with JSON data
                                    function updateHiddenField() {
                                        var data = [];
                                        tableBody.find("tr").each(function () {
                                            var columns = $(this).find("td");
                                            var item = {
                                                "HeadName": columns.eq(0).text(),
                                                "Purpose": columns.eq(1).text(),
                                                "Quantity": columns.eq(2).text(),
                                                "Amount": columns.eq(3).text()
                                            };
                                            data.push(item);
                                        });

                                        // Convert data array to JSON string
                                        var jsonData = JSON.stringify(data);

                                        // Set JSON data to hidden field
                                        jsonDataField.val(jsonData);
                                    }

                                    // Function to toggle table visibility based on row count
                                    function toggleTableVisibility() {
                                        tableContainer.toggle(tableBody.find("tr").length > 0);
                                    }

                                    // Function to get the current total amount in the table
                                    function getCurrentTotalAmount() {
                                        var currentTotal = 0;
                                        tableBody.find("tr").each(function () {
                                            var columns = $(this).find("td");
                                            var amount = parseFloat(columns.eq(3).text()) || 0;
                                            currentTotal += amount;
                                        });
                                        return currentTotal;
                                    }

                                    // Function to check if inputs are valid
                                    function isValidInputs(purpose, quantity, amount) {
                                        if (purpose !== SELECT_OPTION && quantity && amount) {
                                            return true;
                                        } else {
                                            alert(ERROR_MESSAGES.FILL_ALL_FIELDS);
                                            return false;
                                        }
                                    }

                                    // Function to add a new row
                                    function addTableRow(head, purpose, quantity, amount) {
                                        var newRow = `<tr><td>${head}</td><td>${purpose}</td><td>${quantity}</td><td>${amount.toFixed(2)}</td><td><button class='btn btn-danger btn-sm deleteBtn'>Delete</button></td></tr>`;
                                        tableBody.append(newRow);
                                        toggleTableVisibility();
                                    }

                                    // Function to clear input fields
                                    function clearInputFields() {
                                        $("#headInput, #subHeadInput, #autoQuantityInput, #ReceiptAmount, #DonationMode").val("");
                                    }
                                });
                            </script>

                        </div>

                    </div>
                </fieldset>

                <fieldset>
                    <legend style="font-weight: bold;" class="card">Donor Instructions</legend>
                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="manavFormulaRequire">Manav Formula Require</label>
                                <div class="custom-control custom-radio">
                                    <input class="custom-control-input" type="radio" name="IsManavaFormulaRequire" id="manavFormulaYes" asp-for="IsManavaFormulaRequire" value="true" @(Model.IsManavaFormulaRequire.GetValueOrDefault() ? "checked" : "")>
                                    <label class="custom-control-label" for="manavFormulaYes">Yes</label>
                                </div>
                                <div class="custom-control custom-radio">
                                    <input class="custom-control-input" type="radio" name="IsManavaFormulaRequire" asp-for="IsManavaFormulaRequire" id="manavFormulaNo" value="false" @(Model.IsManavaFormulaRequire == false ? "checked" : "")>
                                    <label class="custom-control-label" for="manavFormulaNo">No</label>
                                </div>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="patientsPhotoRequire">Patients Photo Require</label>
                                <div class="custom-control custom-radio">
                                    <input class="custom-control-input" type="radio" name="IsPatientsPhotoRequire" id="patientsPhotoYes" asp-for="IsPatientsPhotoRequire" value="true" @(Model.IsPatientsPhotoRequire.GetValueOrDefault() ? "checked" : "")>
                                    <label class="custom-control-label" for="patientsPhotoYes">Yes</label>
                                </div>
                                <div class="custom-control custom-radio">
                                    <input class="custom-control-input" type="radio" name="IsPatientsPhotoRequire" asp-for="IsPatientsPhotoRequire" id="patientsPhotoNo" value="false" @(Model.IsPatientsPhotoRequire == false ? "checked" : "")>
                                    <label class="custom-control-label" for="patientsPhotoNo">No</label>
                                </div>
                            </div>
                            <div class="form-group col-lg-4">
                                <input type="checkbox" class="form-check-input" id="requireCheckbox" name="IfDiffrentAddressForDispatch" value="true" @(Model.IfDiffrentAddressForDispatch.GetValueOrDefault() ? "checked" : "") />
                                <input type="hidden" value="false" name="IfDiffrentAddressForDispatch" />
                                <label for="requireCheckbox">If the dispatch address is different, please fill in the address here.</label>

                                <input class="form-control" value="@Model.DifferentAddressToDispatch" type="text" placeholder="Address" oninput="convertToUpperCase(this)" name="DifferentAddressToDispatch" asp-for="DifferentAddressToDispatch" id="requireWithTextbox" style="@(Model.IfDiffrentAddressForDispatch.GetValueOrDefault() ? "display: block;" : "display: none;")">
                            </div>

                            <script>
                                document.getElementById('requireCheckbox').addEventListener('change', function () {
                                    var textbox = document.getElementById('requireWithTextbox');
                                    textbox.style.display = this.checked ? 'block' : 'none';
                                });

                                // Handle initial state when the page loads
                                window.addEventListener('DOMContentLoaded', function () {
                                    var checkbox = document.getElementById('requireCheckbox');
                                    var textbox = document.getElementById('requireWithTextbox');
                                    textbox.style.display = checkbox.checked ? 'block' : 'none';
                                });
                            </script>
                            <div class="form-group col-lg-3">
                                <label for="instruction">Donor Instruction</label>
                                <select class="form-control" asp-for="Instructions" id="Instruction" name="Instructions">
                                    <option value="0">Select Donor Instructions</option>
                                    @if (Model != null)
                                    {
                                        @foreach (var mod in Model.donorInstructionList)
                                        {
                                            <option value="@mod.REF_ID">@mod.InstructionName</option>
                                        }

                                    }
                                </select>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="remarks">Remarks</label>
                                <textarea class="form-control" rows="1" asp-for="ReceiptRemarks" name="ReceiptRemarks" oninput="convertToUpperCase(this)" typeof="text" id="remarks"></textarea>
                            </div>
                            <div class="col-lg-2">
                                <br />
                                <button type="button" id="addRowBtn" class="btn btn-primary"><i class="fas fa-plus"></i>Add</button>

                            </div>
                            <table class="table table-bordered" id="instructionTable" style="display: none;">
                                <thead>
                                    <tr>
                                        <th>Donor Instruction</th>
                                        <th>Remarks</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rows will be dynamically added here -->
                                </tbody>
                            </table>
                            <input type="hidden" id="jsonDatafordonorInstruction" asp-for="donorInstructionjsonList" name="donorInstructionjsonList" />

                            <script>
                                $(document).ready(function () {
                                    // Initialize the table with data from the model
                                    var donorInstructionsListJson = @Html.Raw(Model.DonorInstructionsListJson);
                                    var instructionTableBody = $("#instructionTable tbody");
                                    var jsonDataField = $("#jsonDatafordonorInstruction");

                                    if (donorInstructionsListJson && donorInstructionsListJson.length > 0) {
                                        $.each(donorInstructionsListJson, function (index, item) {
                                            var newRow = "<tr>" +
                                                "<td>" + item.InstructionName + "<input type='hidden' name='SelectedInstructions' value='" + item.InstructionId + "' /></td>" +
                                                "<td>" + item.Remarks + "</td>" +
                                                "<td><button type='button' class='btn btn-danger deleteRowBtn'>Delete</button></td>" +
                                                "</tr>";
                                            instructionTableBody.append(newRow);
                                        });
                                        toggleTableVisibility();
                                    }

                                    // Button click event
                                    $("#addRowBtn").click(function () {
                                        // Get selected values
                                        var selectedInstructionId = $("#Instruction").val();
                                        var selectedInstructionName = $("#Instruction option:selected").text();
                                        var remarks = $("#remarks").val();

                                        // Validate
                                        if (selectedInstructionId === "0") {
                                            alert("Please select a Donor Instruction.");
                                            return;
                                        }

                                        // Add row to the table
                                        var newRow = "<tr>" +
                                            "<td>" + selectedInstructionName + "<input type='hidden' name='SelectedInstructions' value='" + selectedInstructionId + "' /></td>" +
                                            "<td>" + remarks + "</td>" +
                                            "<td><button type='button' class='btn btn-danger deleteRowBtn'>Delete</button></td>" +
                                            "</tr>";

                                        instructionTableBody.append(newRow);

                                        // Update hidden field with JSON data
                                        updateHiddenField();

                                        // Clear input values
                                        $("#Instruction").val("0");
                                        $("#remarks").val("");

                                        // Show the table
                                        toggleTableVisibility();
                                    });

                                    // Handle delete button click within the table
                                    instructionTableBody.on("click", ".deleteRowBtn", function () {
                                        $(this).closest("tr").remove();

                                        // Update hidden field with JSON data
                                        updateHiddenField();

                                        // Hide the table if there are no rows
                                        toggleTableVisibility();
                                    });

                                    // Function to update the hidden field with JSON data
                                    function updateHiddenField() {
                                        var data = [];
                                        instructionTableBody.find("tr").each(function () {
                                            var columns = $(this).find("td");
                                            var item = {
                                                "InstructionId": $(columns.eq(0)).find("input[name='SelectedInstructions']").val(),
                                                "InstructionName": columns.eq(0).text(),
                                                "Remarks": columns.eq(1).text()
                                            };
                                            data.push(item);
                                        });

                                        // Convert data array to JSON string
                                        var jsonData = JSON.stringify(data);

                                        // Set JSON data to hidden field
                                        jsonDataField.val(jsonData);
                                    }

                                    // Function to toggle table visibility based on row count
                                    function toggleTableVisibility() {
                                        if (instructionTableBody.find("tr").length === 0) {
                                            $("#instructionTable").hide();
                                        } else {
                                            $("#instructionTable").show();
                                        }
                                    }
                                });
                            </script>

                        </div>
                    </div>
                    <div class="card-header text-center">
                        <div class="form-check form-check-inline">
                            <input type="checkbox" class="form-check-input" id="announcedue" name="IfAnnounceDueInFuture" value="true" @(Model.IfAnnounceDueInFuture ? "checked" : "") />
                            <input type="hidden" name="IfAnnounceDueInFuture" value="false" />
                            <label class="form-check-label" for="announcedue"> If Announce Due For Future Dates</label>
                        </div>
                        <script>
                            $(document).ready(function () {
                                var announceCheckbox = $("#announcedue");
                                var announceFieldset = $("#announceFieldset");

                                announceCheckbox.on("change", function () {
                                    announceFieldset.toggle(this.checked);

                                    // Hide the table if there are no rows
                                    if (!this.checked) {
                                        $("#announceTable").hide();
                                    }
                                });

                                // Trigger the change event to initialize the state
                                announceCheckbox.change();

                                var tableBody = $("#tableBody");

                                $("#btn").on("click", function () {
                                    var newRow = $("<tr>");
                                    // Add your row creation logic here
                                    tableBody.append(newRow);

                                    // Clear input fields
                                    $("#totalPurposeAmount, #receiveAmount, #dueAmount, #announceId, #amount, #date1").val("");

                                    // Show the table
                                    $("#announceTable").show();
                                });
                            });
                        </script>
                    </div>
                </fieldset>

                <fieldset id="announceFieldset" style="display: none;">
                    <legend style="font-weight:bold;" class="card">Announce Due Installment Details</legend>
                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="totalPurposeAmount">Total Purpose Amount</label>
                                <input class="form-control" id="totalPurposeAmountAnnounce" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="receiveAmount">Receive Amount</label>
                                <input class="form-control" id="receiveAmountAnnounce" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="dueAmount">Due Amount</label>
                                <input class="form-control" id="dueAmountAnnounce" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="announceId">Announce ID</label>
                                <input class="form-control" id="announceIdAnnounce" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="amount">Amount</label>
                                <input class="form-control" id="amountAnnounce" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="date1">Date</label>
                                <input type="date" class="form-control" id="date1Announce" />
                            </div>
                            <div class="form-group col-lg-2">
                                <br />
                                <button class="btn btn-primary" id="btnAddAnnounce">Add</button>
                            </div>
                        </div>
                        <div class="row">
                            <table class="table table-bordered" id="announceTable" style="display: none;">
                                <thead>
                                    <tr>
                                        <th>Total Purpose Amount</th>
                                        <th>Receive Amount</th>
                                        <th>Due Amount</th>
                                        <th>Announce ID</th>
                                        <th>Amount</th>
                                        <th>Date</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="tableBodyAnnounce">
                                    <!-- Table rows will be added dynamically here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </fieldset>
                <input type="hidden" id="announceData" asp-for="AnnounceDetsilsList" name="AnnounceDetsilsList" />
                <script>
                    $(document).ready(function () {
                        var tableBody = $("#tableBodyAnnounce");
                        var jsonDataField = $("#announceData");

                        // Initialize table with data from the model
                        var announceDetailsListJson = @Html.Raw(Model.AnnounceDetailsListJson);
                        if (announceDetailsListJson) {
                            $.each(announceDetailsListJson, function (index, item) {
                                var newRow = $("<tr>");
                                newRow.append("<td>" + item.TotalPurposeAmount + "</td>");
                                newRow.append("<td>" + item.ReceiveAmount + "</td>");
                                newRow.append("<td>" + item.DueAmount + "</td>");
                                newRow.append("<td>" + item.AnnunceID + "</td>");
                                newRow.append("<td>" + item.Amount + "</td>");
                                newRow.append("<td>" + new Date(item.date).toLocaleDateString() + "</td>");
                                newRow.append("<td><button class='btn btn-danger btn-sm delete-row-announce'>Delete</button></td>");
                                tableBody.append(newRow);
                            });
                            toggleTableVisibility();
                        }

                        $("#btnAddAnnounce").on("click", function () {
                            event.preventDefault();
                            var newRow = $("<tr>");
                            newRow.append("<td>" + $("#totalPurposeAmountAnnounce").val() + "</td>");
                            newRow.append("<td>" + $("#receiveAmountAnnounce").val() + "</td>");
                            newRow.append("<td>" + $("#dueAmountAnnounce").val() + "</td>");
                            newRow.append("<td>" + $("#announceIdAnnounce").val() + "</td>");
                            newRow.append("<td>" + $("#amountAnnounce").val() + "</td>");
                            newRow.append("<td>" + $("#date1Announce").val() + "</td>");
                            newRow.append("<td><button class='btn btn-danger btn-sm delete-row-announce'>Delete</button></td>");

                            tableBody.append(newRow);

                            // Clear input fields
                            $("#totalPurposeAmountAnnounce, #receiveAmountAnnounce, #dueAmountAnnounce, #announceIdAnnounce, #amountAnnounce, #date1Announce").val("");

                            // Show the table
                            $("#announceTable").show();

                            // Update JSON in hidden field after row addition
                            updateHiddenField();
                        });

                        // Delete row when the delete button is clicked
                        tableBody.on("click", ".delete-row-announce", function () {
                            $(this).closest("tr").remove();

                            // Hide the table if there are no rows
                            toggleTableVisibility();

                            // Update JSON in hidden field after row deletion
                            updateHiddenField();
                        });

                        // Function to update the hidden field with JSON data
                        function updateHiddenField() {
                            var announceData = [];

                            tableBody.find('tr').each(function () {
                                var row = $(this);
                                var rowData = {
                                    TotalPurposeAmount: row.find('td:eq(0)').text(),
                                    ReceiveAmount: row.find('td:eq(1)').text(),
                                    DueAmount: row.find('td:eq(2)').text(),
                                    AnnounceId: row.find('td:eq(3)').text(),
                                    Amount: row.find('td:eq(4)').text(),
                                    Date: row.find('td:eq(5)').text()
                                };
                                announceData.push(rowData);
                            });

                            // Convert data array to JSON string
                            var jsonData = JSON.stringify(announceData);

                            // Set JSON data to hidden field
                            jsonDataField.val(jsonData);
                        }

                        // Function to toggle table visibility based on row count
                        function toggleTableVisibility() {
                            if (tableBody.find("tr").length === 0) {
                                $("#announceTable").hide();
                            } else {
                                $("#announceTable").show();
                            }
                        }
                    });
                </script>


                <fieldset>
                    <legend style="font-weight:bold;" class="card">Attach Scan Copy</legend>

                    <style>
                        .file-preview {
                            position: relative;
                            max-width: 100%;
                            height: auto;
                            text-align: center;
                        }

                        .img-preview {
                            max-width: 100%;
                            max-height: 200px; /* Set a fixed height for the image preview */
                            display: none;
                            margin: 0 auto; /* Center the image horizontally */
                        }

                        .pdf-view {
                            width: 100%;
                            height: 200px; /* Set a fixed height for the PDF preview */
                            display: none;
                        }
                    </style>

                    <div class="nested-form-container">
                        <div class="row">
                            <div class="form-group col-lg-4" data-input-id="file1">
                                <label for="file1">Attach Document 1</label>
                                <input type="file" name="Doc1" asp-for="Doc1" id="file1" accept="image/*,application/pdf" onchange="previewFile(this)" />
                                <div class="file-preview">
                                    <img class="img-preview" src="~/DocDonationReceive/placeholder-image.jpg" alt="Uploaded Image" />
                                    <object class="pdf-view" data="@Url.Content("~/DocDonationReceive/" + Model.Doc1)" type="application/pdf"></object>
                                </div>
                                <span class="filename"></span>
                                <a class="btn btn-primary download-link" style="display: none;">Download</a>
                            </div>

                            <div class="form-group col-lg-4" data-input-id="file2">
                                <label for="file2">Attach Document 2</label>
                                <input type="file" name="Doc2" asp-for="Doc2" id="file2" accept="image/*,application/pdf" onchange="previewFile(this)" />
                                <div class="file-preview">
                                    <img class="img-preview" src="~/DocDonationReceive/placeholder-image.jpg" alt="Uploaded Image" />
                                    <object class="pdf-view" data="@Url.Content("~/DocDonationReceive/" + Model.Doc2)" type="application/pdf"></object>
                                </div>
                                <span class="filename"></span>
                                <a class="btn btn-primary download-link" style="display: none;">Download</a>
                            </div>

                            <div class="form-group col-lg-4" data-input-id="file3">
                                <label for="file3">Attach Document 3</label>
                                <input type="file" name="Doc3" asp-for="Doc3" id="file3" accept="image/*,application/pdf" onchange="previewFile(this)" />
                                <div class="file-preview">
                                    <img class="img-preview" src="~/DocDonationReceive/placeholder-image.jpg" alt="Uploaded Image" />
                                    <object class="pdf-view" data="@Url.Content("~/DocDonationReceive/" + Model.Doc3)" type="application/pdf"></object>
                                </div>
                                <span class="filename"></span>
                                <a class="btn btn-primary download-link" style="display: none;">Download</a>
                            </div>

                        </div>
                    </div>

                    <script>
                        function previewFile(input) {
                            var formGroup = input.parentElement;
                            var preview = formGroup.querySelector('.file-preview');
                            var filename = formGroup.querySelector('.filename');
                            var downloadLink = formGroup.querySelector('.download-link');

                            var file = input.files[0];

                            if (file) {
                                filename.innerText = file.name;

                                if (file.type.startsWith('image/')) {
                                    // Display image preview
                                    preview.querySelector('.img-preview').src = URL.createObjectURL(file);
                                    preview.querySelector('.img-preview').style.display = 'block';
                                    preview.querySelector('.pdf-view').style.display = 'none';
                                }
                                else if (file.type === 'application/pdf') {
                                    // Display PDF preview
                                    preview.querySelector('.img-preview').style.display = 'none';
                                    preview.querySelector('.pdf-view').style.display = 'block';
                                }

                                downloadLink.style.display = 'block';
                            }
                            else {
                                filename.innerText = '';
                                preview.querySelector('.img-preview').style.display = 'none';
                                preview.querySelector('.pdf-view').style.display = 'none';
                                downloadLink.style.display = 'none';
                            }
                        }
                    </script>
                </fieldset>

                <br />
                <div class="container-lg">
                    <div class="text-center">
                        <button type="button" id="submitButton" class="btn btn-success"><i class="fas fa-check"></i> Submit</button>
                        <a href="@Url.Action("PrintProvisionalReceipt", "DonationReceiveMaster", new { refid = Model.ReceiveID })" class="btn btn-secondary">
                            <i class="fas fa-print"></i> Print
                        </a>  <button type="reset" class="btn btn-warning"><i class="fas fa-undo"></i> CIT</button>
                        <button type="reset" class="btn btn-danger">Cancel</button>
                        <a title="Go Back Home" href="/Gangotri/Home" class="btn btn-warning"><i class="fas fa-arrow-left"></i> Back</a>
                    </div>
                </div>

            </form>
        </div>
    </div>
</body>
</html>


