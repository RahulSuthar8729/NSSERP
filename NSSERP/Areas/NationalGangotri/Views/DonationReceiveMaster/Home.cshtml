@using System.Security.Claims;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Mvc.TagHelpers;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using System.IO;

@model NSSERP.Areas.NationalGangotri.Models.DonationReceiveMaster;
@{
    ViewData["Title"] = "DonationReceiveMaster";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var temporaryFolder = Href("/TempDocDonationReceive");
    var rootUrl = Url.Content("~");
    var UserDepartment = User.FindFirst("Department")?.Value;
}
<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="..." crossorigin="anonymous" />
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="..."></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="..."></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="..."></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    <style>
        .card-header.sticky-top {
            background-color: #fff;
            z-index: 1000;
            border-bottom: 1px solid #dee2e6;
        }
    </style>
    @section scripts {
        <script>
            function convertToUpperCase(input) {
                input.value = input.value.toUpperCase();
            }
        </script>
        <script>
            $(document).ready(function () {
                $('#submitButton').click(function (event) {
                    // Prevent the default form submission
                    event.preventDefault();

                    // Trigger HTML5 form validation
                    $('#donationForm')[0].reportValidity();

                    // Check if the form is valid
                    if ($('#donationForm')[0].checkValidity()) {
                        // If valid, submit the form
                        $('#donationForm').submit();
                    } else {
                        // If not valid, focus on the first invalid field
                        $('#donationForm :invalid').first().focus();
                    }
                });
            });
        </script>
    }
</head>
<body>
    <div class="card">
        @if (Model.msg != null || Model.msg != "")
        {
            ViewBag.msg = Model.msg;
        }
        <div class="card-header">
            <div class="row">
                <div class="col text-left">
                    <h5>
                        <span style="color:#1cb8a1">@User.FindFirst("Department")?.Value.ToUpper() DONATION RECEIVE </span>
                        <span style="color:#28166f">MASTER</span>
                    </h5>
                </div>
                <div class="col text-left">
                    <h5>
                        <span style="color:#1cb8a1">INDIAN GANGOTRI</span>
                    </h5>
                </div>
                <div class="col-2 text-right">
                    <a title="Go Back Home" href="/Gangotri/Home" class="btn btn-warning"><i class="fas fa-arrow-left"></i> Back</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <form id="donationForm" action="/NationalGangotri/DonationReceiveMaster/Home" enctype="multipart/form-data" method="post">
                @Html.AntiForgeryToken()
                <div class="col-lg-3">

                    <div class="form-check form-check-inline" style="display:none;">
                        <input class="form-check-input" id="IsReceiveHeadDiffrent" name="IsReceiveHeadDiffrent" type="checkbox" value="true" @(Model.IsReceiveHeadDiffrent.GetValueOrDefault() ? "checked" : "") />
                        <label class="form-check-label" for="IsReceiveHeadDiffrent">
                            <span style="color: darkblue; font-weight: bold">Is ReceiveHead Different</span>
                        </label>
                    </div>

                    <script>
                        // Using jQuery for simplicity, ensure you include jQuery in your project
                        $(document).ready(function () {
                            // Function to show/hide divReceiveHead based on checkbox state
                            function toggleDivBasedOnCheckboxState() {
                                if ($('#IsReceiveHeadDiffrent').is(':checked')) {
                                    $('#divReceiveHead').show();
                                    $('#ReceiveHeadName').focus(); // Focus on a specific element, adjust this according to your actual structure
                                } else {
                                    $('#divReceiveHead').hide();
                                }
                            }

                            // Show/hide divReceiveHead based on checkbox state when the page loads
                            toggleDivBasedOnCheckboxState();

                            // Attach change event to the checkbox
                            $('#IsReceiveHeadDiffrent').change(function () {
                                toggleDivBasedOnCheckboxState();
                            });
                        });
                    </script>

                </div>
                <br />
                <fieldset class="show border rounded p-3">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#receiveDetailsContent" aria-expanded="false" aria-controls="receiveDetailsContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Receive Details</span>
                        </button>
                    </legend>
                    <div id="receiveDetailsContent" class="nested-form-container collapse show">

                        <div id="divReceiveHead" class="col-lg-3" style="display: none;">
                            <div class="form-group">
                                <label for="receivehead">Receive Head</label>

                                <div class="input-group">
                                    <select class="custom-select" id="ReceiveHeadName" name="ReceiveHeadID" asp-for="ReceiveHeadID">
                                        <option value="" selected disabled>Select Receive Head</option>
                                        @foreach (var receivehead in Model.ReceiveHeadList)
                                        {
                                            <option value="@receivehead.ReceiveHeadID" data-receiveheadname="@receivehead.ReceiveHeadName">
                                                @receivehead.ReceiveHeadName
                                            </option>
                                        }
                                    </select>
                                    <input type="hidden" name="ReceiveHeadName" asp-for="ReceiveHeadName" id="receiveHeadHidden" />
                                    <script>
                                        $("#ReceiveHeadName").change(function () {
                                            var selectedReceiveHeadName = $(this).find("option:selected").data("receiveheadname");
                                            $("#receiveHeadHidden").val(selectedReceiveHeadName); // Use data("receiveheadname") if you change it to data-receiveheadname
                                        });

                                        // Set the selected item based on model's ReceiveHeadID
                                        var modelReceiveHeadID = '@Model.ReceiveHeadID'; // Convert to string for comparison
                                        if (modelReceiveHeadID) {
                                            $("#ReceiveHeadName").val(modelReceiveHeadID);
                                            $("#ReceiveHeadName").trigger("change"); // Trigger the change event to update the hidden field
                                        }
                                    </script>
                                </div>
                            </div>
                        </div>
                        <div class="nested-form-container">
                            <div class="row">
                                <div class="form-group col-lg-3">
                                    <label for="Receive ID">Receive ID</label>
                                    <input type="text" readonly class="form-control" id="ReceiveID" value="@Model.ReceiveID" asp-for="ReceiveID" name="ReceiveID">
                                </div>
                                <div class="form-group col-lg-3">
                                    <label for="Receive Date">Receive Date</label>
                                    <input type="text" readonly value="@Model.ReceiveDate.ToString("dd-MM-yyyy")" class="form-control" id="ReceiveDate" asp-for="ReceiveDate" name="ReceiveDate">
                                </div>
                                <div class="col-lg-6">
                                    <label>Search BY</label>
                                    <div class="input-group">
                                        <select class="form-select col-2" id="SearchParaType" name="SearchParaType" asp-for="SearchParaType">
                                            <option value="" selected disabled>Select</option>
                                            <option value="Aadhar">Aadhar</option>
                                            <option value="PAN">PAN</option>
                                            <option value="Mobile">Mobile</option>
                                            <option value="DonorID">DonorID</option>
                                            <option value="Email">Email</option>
                                        </select>
                                        <input type="text" class="form-control col-8" id="SearchData" name="SearchData" placeholder="Search data...">
                                        <button type="button" class="btn btn-primary col-2" id="searchBtn"><i class="fas fa-search"></i> Search</button>
                                    </div>
                                </div>
                                <script>
                                    $(document).ready(function () {
                                        $("#searchBtn").on('click', function () {
                                            performSearch();
                                        });

                                        function performSearch() {
                                            var searchType = $("#SearchParaType").val();
                                            var searchData = $("#SearchData").val();

                                            if (searchType && searchData) {
                                                $.ajax({
                                                    type: "GET",
                                                    url: '/NationalGangotri/DonationReceiveMaster/SearchData',
                                                    data: { searchType: searchType, searchData: searchData },
                                                    success: function (response) {
                                                        if (response != null) {
                                                            var jsonData = response.data;

                                                            if (jsonData && Object.keys(jsonData).length > 0) {
                                                                // If there is data, check if it's a single row or multiple rows
                                                                if (Array.isArray(jsonData)) {
                                                                    // If there are multiple rows, open the modal
                                                                    openSearchResultsModal(jsonData);
                                                                } else {
                                                                    // If there is only one row, fill the form directly
                                                                    fillForm(jsonData);
                                                                }
                                                            } else {
                                                                console.log("No data found for the entered criteria.");
                                                            }
                                                        } else {
                                                            console.log("No data found for the entered criteria.");
                                                        }
                                                    },
                                                    error: function (error) {
                                                        console.error(error);
                                                    }
                                                });
                                            }
                                        }

                                        function fillForm(data) {
                                            selectOptionByText('#NamePrefix', data.DShri);

                                            $('#DonorID').val(data.DonorID);
                                            $('#FirstName').val(data.DName);
                                            $('#MiddleName').val(data.MiddleName);
                                            $('#LastName').val(data.DLName);
                                            $('#DateOfBirth').val(moment(data.DateOfBirth).format('YYYY-MM-DD'));

                                            $('#Company').val(data.Company);
                                            $('#Address1').val(data.Add1);
                                            $('#Address2').val(data.Add2);
                                            $('#Address3').val(data.Add3);
                                            $('#PinCode1').val(data.Pincode);

                                            // Fill Second Permanent Address
                                            $('#P_Address1').val(data.OffAdd1);
                                            $('#P_Address2').val(data.OffAdd2);
                                            $('#P_Address3').val(data.OffAdd3);

                                            var placeText = data.Place;
                                            $('#CityID option:contains("' + placeText + '")').prop('selected', true);
                                            $('#CityID').trigger('change');

                                            // Parse pinCodeMasterList
                                            var pinCodeMaster = JSON.parse(data.pinCodeMasterList);

                                            // Bind the CountryID dropdown
                                            $('#CountryID').val(pinCodeMaster.CountryID);

                                            // Bind the StateID dropdown
                                            $('#StateID').empty().append('<option value="' + pinCodeMaster.StateID + '">' + pinCodeMaster.StateName + '</option>');

                                            // Populate District dropdown
                                            $('#DistrictID').empty().append('<option value="' + pinCodeMaster.DistrictID + '">' + pinCodeMaster.DistrictName + '</option>');

                                            // Bind the mobile numbers table
                                            bindMobileNumbersTable(data.MobileListJson);

                                            // Bind the identity details
                                            bindIdentityDetails(data.IdentityListJson);


                                        }


                                        function openSearchResultsModal(searchResults) {
                                            // Clear previous search results
                                            $('#searchResultsTableBody').empty();

                                            // Populate the modal table with search results
                                            searchResults.forEach(function (data) {
                                                $('#searchResultsTableBody').append(
                                                    '<tr>' +
                                                    '<td>' + data.DonorID + '</td>' +
                                                    '<td>' + data.DName + ' ' + data.MiddleName + ' ' + data.DLName + '</td>' +
                                                    '<td><button class="btn btn-primary select-row" data-donorid="' + data.DonorID + '">Select</button></td>' +
                                                    '</tr>'
                                                );
                                            });

                                            // Show the modal
                                            $('#searchResultsModal').modal('show');
                                        }

                                        // Add a click event handler for the "Select" button in the modal
                                        $(document).on('click', '.select-row', function () {
                                            var donorID = $(this).data('donorid');

                                            // You can perform additional actions based on the selected donorID
                                            // For now, let's log the selected donorID
                                            console.log("Selected Donor ID:", donorID);

                                            // Close the modal after selecting a row
                                            $('#searchResultsModal').modal('hide');
                                        });

                                        function selectOptionByText(selectId, text) {
                                            var select = $(selectId);
                                            if (text !== undefined && text !== null) {
                                                text = text.trim();
                                            }

                                            select.find('option:contains("' + text + '")').prop('selected', true);
                                        }
                                        // Function to bind the mobile numbers table
                                        function bindMobileNumbersTable(mobileListJson, DonorID, ReceiveHeadName) {
                                            var mobileNumbersTable = $("#contactDetailsTable tbody");
                                            mobileNumbersTable.empty(); // Clear existing rows

                                            // Parse the JSON string in mobileListJson if it's a string
                                            var mobileList = Array.isArray(mobileListJson) ? mobileListJson : JSON.parse(mobileListJson);

                                            if (mobileList && mobileList.length > 0) {
                                                // Loop through each item in the JSON array
                                                $.each(mobileList, function (index, item) {
                                                    // Add a new row to the table
                                                    var newRowContactDetails = $("<tr>");
                                                    newRowContactDetails.append("<td>" + item.ContactType + "</td>");
                                                    newRowContactDetails.append("<td>" + item.CountryCode + "</td>");
                                                    newRowContactDetails.append("<td>" + item.MobileNumber + "</td>");
                                                    newRowContactDetails.append("<td style='display:none'>" + DonorID + "</td>");
                                                    newRowContactDetails.append("<td style='display:none'>" + ReceiveHeadName + "</td>");
                                                    newRowContactDetails.append("<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>");

                                                    // Add a special class to identify rows from MobileListJson
                                                    newRowContactDetails.addClass("json-data-row");

                                                    mobileNumbersTable.append(newRowContactDetails);
                                                    updateContactDetailsHiddenField();
                                                });

                                                // Show the table
                                                $("#contactDetailsTable").css("visibility", "visible");
                                                $("#contactDetail").val("");
                                            }
                                        }

                                        // Function to bind the identity details
                                        function bindIdentityDetails(identityListJson) {
                                            var addedIdentities = $("#addedIdentities");

                                            // Clear existing identities
                                            addedIdentities.empty();

                                            // Check if identityListJson is not an empty string
                                            if (identityListJson.trim() === "") {
                                                return;
                                            }

                                            // Parse the JSON string in identityListJson
                                            var identityList = Array.isArray(identityListJson) ? identityListJson : JSON.parse(identityListJson);

                                            if (identityList && identityList.length > 0) {
                                                // Loop through each item in the JSON array
                                                $.each(identityList, function (index, identity) {
                                                    // Create a new row for the added identity
                                                    var newRowIdentity = $("<div class='form-group col-lg-3'>");
                                                    newRowIdentity.append("<label for='" + identity.identityType + "'>" + identity.identityType + "</label>");
                                                    newRowIdentity.append("<input class='form-control' id='" + identity.identityType + "' type='text' value='" + identity.identityNumber + "' readonly />");
                                                    newRowIdentity.append("<button class='btn btn-danger btn-sm delete-identity'>Delete</button>");

                                                    // Append the new row to the container
                                                    addedIdentities.append(newRowIdentity);

                                                    // Show the added identities section
                                                    addedIdentities.css("display", "flex");
                                                });

                                                // Update the hidden field value with the current identities after binding
                                                updateHiddenField();
                                            }
                                        }

                                        // Function to update the hidden field with the current identities displayed in the UI
                                        function updateHiddenField() {
                                            var currentIdentities = [];

                                            // Loop through each item in the addedIdentities section
                                            $("#addedIdentities .form-group").each(function () {
                                                var identityType = $(this).find("label").text();
                                                var identityNumber = $(this).find("input").val();

                                                currentIdentities.push({
                                                    IdentityType: identityType,
                                                    IdentityNumber: identityNumber
                                                });
                                            });

                                            // Update the hidden field value with the current identities as a JSON string
                                            $("#identityDetails").val(JSON.stringify(currentIdentities));
                                        }

                                        function updateContactDetailsHiddenField() {
                                            var tableDataContactDetails = [];

                                            $("#contactDetailsTable tbody tr").each(function () {
                                                var rowDataContactDetails = {};
                                                $(this).find("td").each(function (index, element) {
                                                    if (index === 0) {
                                                        rowDataContactDetails.ContactType = $(element).text();
                                                    } else if (index === 1) {
                                                        rowDataContactDetails.CountryCode = $(element).text();
                                                    } else if (index === 2) {
                                                        rowDataContactDetails.ContactDetail = $(element).text();
                                                    }
                                                });

                                                tableDataContactDetails.push(rowDataContactDetails);
                                            });

                                            $("#mobileListField").val(JSON.stringify(tableDataContactDetails));
                                        }

                                    });

                                </script>



                                <!-- Modal -->
                                <div class="modal fade" id="searchResultsModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="exampleModalLabel">Search Results</h5>
                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <table class="table">
                                                    <thead>
                                                        <tr>
                                                            <!-- Add table headers based on your response structure -->
                                                            <th>Donor ID</th>
                                                            <th>Name</th>
                                                            <!-- Add more headers as needed -->
                                                            <th>Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="searchResultsTableBody">
                                                        <!-- Search results rows will be appended here dynamically -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>




                                <div class="form-group col-lg-3" style="display:none;">
                                    <label for="ID">Receive in Event:</label>

                                    <select class="form-control" id="ID" name="ID" asp-for="ID">
                                        <option value="" selected disabled>Select Event</option>
                                        @foreach (var eventlist in Model.ReceiveInEventList)
                                        {
                                            <option value="@eventlist.ID" data-eventname="@eventlist.EventName">
                                                @eventlist.EventName
                                            </option>
                                        }
                                    </select>
                                    <input type="hidden" name="EventName" asp-for="EventName" id="EventNameHidden" />
                                    <script>
                                        $("#ID").change(function () {
                                            var selectedEventName = $(this).find("option:selected").data("eventname");
                                            $("#EventNameHidden").val(selectedEventName);
                                        });

                                        var modelID = parseInt('@Model.ReceiveInEventID'); // Convert to number
                                        // Convert to string for comparison
                                        if (modelID) {
                                            $("#ID").val(modelID);
                                            $("#ID").trigger("change"); // Trigger the change event to update the hidden field
                                        }
                                    </script>
                                </div>

                                <div class="form-group col-lg-3" style="display:none;">
                                    <label for="Campaign">Campaign</label>
                                    <select class="custom-select" asp-for="" id="Campaign" name="CampaignID">
                                        <option value="" selected disabled>Select</option>
                                        @if (Model != null)
                                        {
                                            foreach (var mod in Model.campaignlist)
                                            {
                                                <option value="@mod.REF_ID" data-campaignname="@mod.CampaignName">@mod.CampaignName</option>
                                            }
                                        }
                                    </select>
                                    <input type="hidden" name="CampaignName" asp-for="CampaignName" id="CampaignNamehideen" />
                                    <script>
                                        $("#Campaign").change(function () {
                                            var selectedEventName = $(this).find("option:selected").data("campaignname");
                                            $("#CampaignNamehideen").val(selectedEventName);
                                        });

                                        var modelID = parseInt('@Model.CampaignID'); // Convert to number
                                        // Convert to string for comparison
                                        if (modelID) {
                                            $("#Campaign").val(modelID);
                                            $("#Campaign").trigger("change"); // Trigger the change event to update the hidden field
                                        }
                                    </script>
                                </div>

                            </div>

                        </div>
                    </div>


                </fieldset>

                <fieldset class="show border rounded p-3">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#personalDetailsContent" aria-expanded="false" aria-controls="personalDetailsContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Personal Details</span>
                        </button>
                    </legend>

                    <div id="personalDetailsContent" class="nested-form-container collapse show">
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="">Donor ID</label>
                                <input class="form-control" placeholder="Please enter the donor ID to fetch donor data." id="DonorID" value="@Model.DonorID" asp-for="DonorID" name="DonorID" />
                            </div>
                            <script>
                                $(document).ready(function () {
                                    $('#DonorID').blur(function () {
                                        var enteredDonorID = $(this).val();
                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetDataByDonorID',
                                            type: 'GET',
                                            data: { donorID: enteredDonorID },
                                            success: function (response) {
                                                if (response != null) {
                                                    var jsonData = JSON.parse(response.data);

                                                    // Populate form fields with JSON data
                                                    // Populate form fields with JSON data
                                                    selectOptionByText('#NamePrefix', jsonData.NamePrefix);

                                                    // Function to select option in a select element based on text
                                                    function selectOptionByText(selectId, text) {
                                                        var select = $(selectId);

                                                        // Check if text is defined before using trim
                                                        if (text !== undefined && text !== null) {
                                                            text = text.trim();
                                                        }

                                                        select.find('option:contains("' + text + '")').prop('selected', true);
                                                    }

                                                    selectOptionByText('#PrefixToFullName', jsonData.PrefixToFullName);
                                                    $('#FirstName').val(jsonData.FirstName);
                                                    $('#MiddleName').val(jsonData.MiddleName);
                                                    $('#LastName').val(jsonData.LastName);
                                                    $('#RelationToFullName').val(jsonData.RelationToFullName);

                                                    // Format date using moment.js (make sure to include moment.js in your project)
                                                    $('#DateOfBirth').val(moment(jsonData.DateOfBirth).format('YYYY-MM-DD'));

                                                    $('#Company').val(jsonData.Company);
                                                    $('#FullAddress').val(jsonData.FullAddress);
                                                    $('#Address1').val(jsonData.Address1);
                                                    $('#Address2').val(jsonData.Address2);
                                                    $('#Address3').val(jsonData.Address3);
                                                    $('#PinCode1').val(jsonData.PinCode);
                                                    $('#CountryID').val(jsonData.CountryID);

                                                    var selectedCountry = jsonData.CountryID;



                                                    var pinCodeMaster = JSON.parse(jsonData.pinCodeMasterList);

                                                    // Bind the StateID dropdown
                                                    $('#StateID').empty().append('<option value="' + pinCodeMaster.StateID + '">' + pinCodeMaster.StateName + '</option>');

                                                    // Populate District dropdown
                                                    $('#DistrictID').empty().append('<option value="' + pinCodeMaster.DistrictID + '">' + pinCodeMaster.DistrictName + '</option>');

                                                    // Populate City dropdown
                                                    $('#CityID').empty().append('<option value="' + pinCodeMaster.CityID + '">' + pinCodeMaster.CityName + '</option>');
                                                    $('#EmailID').val(jsonData.EmailID);
                                                    $('#StdCode').val(jsonData.StdCode);
                                                    $('#PhoneR').val(jsonData.PhoneR);
                                                    $('#IsPermanentAddressDiff').prop('checked', jsonData.IsPermanentAddressDiff);

                                                    // Bind the mobile numbers table
                                                    bindMobileNumbersTable(jsonData.MobileListJson);

                                                    // Bind the identity details
                                                    bindIdentityDetails(jsonData.IdentityListJson);
                                                } else {
                                                    console.log("No data found for the entered DonorID");
                                                }
                                            },
                                            // ... (rest of your code)
                                        });
                                    });

                                    // Function to select option in a select element based on text
                                    function selectOptionByText(selectId, text) {
                                        var select = $(selectId);

                                        // Check if text is defined before using trim
                                        if (text !== undefined && text !== null) {
                                            text = text.trim();
                                        }

                                        select.find('option:contains("' + text + '")').prop('selected', true);
                                    }
                                    // Function to bind the mobile numbers table
                                    function bindMobileNumbersTable(mobileListJson) {
                                        var mobileNumbersTable = $("#contactDetailsTable tbody");
                                        mobileNumbersTable.empty(); // Clear existing rows

                                        // Parse the JSON string in mobileListJson if it's a string
                                        var mobileList = Array.isArray(mobileListJson) ? mobileListJson : JSON.parse(mobileListJson);


                                        if (mobileList && mobileList.length > 0) {
                                            // Loop through each item in the JSON array
                                            $.each(mobileList, function (index, item) {
                                                // Add a new row to the table
                                                var newRowmobile = $("<tr>");
                                                newRowmobile.append("<td>" + item.ContactType + "</td>");
                                                newRowmobile.append("<td>" + item.CountryCode + "</td>");
                                                newRowmobile.append("<td>" + item.MobileNumber + "</td>");
                                                newRowmobile.append("<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>");

                                                // Add a special class to identify rows from MobileListJson
                                                newRowmobile.addClass("json-data-row");

                                                mobileNumbersTable.append(newRowmobile);
                                            });

                                            // Show the table
                                            $("#contactDetailsTable").css("visibility", "visible");
                                        }
                                    }
                                    // Function to bind the identity details
                                    function bindIdentityDetails(identityListJson) {
                                        var addedIdentities = $("#addedIdentities");

                                        // Clear existing identities
                                        addedIdentities.empty();

                                        // Check if identityListJson is not an empty string
                                        if (identityListJson.trim() === "") {
                                            return;
                                        }

                                        // Parse the JSON string in identityListJson
                                        var identityList = Array.isArray(identityListJson) ? identityListJson : JSON.parse(identityListJson);

                                        if (identityList && identityList.length > 0) {
                                            // Loop through each item in the JSON array
                                            $.each(identityList, function (index, identity) {
                                                // Create a new row for the added identity
                                                var newRowIdentity = $("<div class='form-group col-lg-3'>");
                                                newRowIdentity.append("<label for='" + identity.identityType + "'>" + identity.identityType + "</label>");
                                                newRowIdentity.append("<input class='form-control' id='" + identity.identityType + "' type='text' value='" + identity.identityNumber + "' readonly />");
                                                newRowIdentity.append("<button class='btn btn-danger btn-sm delete-identity'>Delete</button>");

                                                // Append the new row to the container
                                                addedIdentities.append(newRowIdentity);

                                                // Show the added identities section
                                                addedIdentities.css("display", "flex");
                                            });

                                            // Update the hidden field value with the current identities after binding
                                            updateHiddenField();
                                        }
                                    }

                                    // Function to update the hidden field with the current identities displayed in the UI
                                    function updateHiddenField() {
                                        var currentIdentities = [];

                                        // Loop through each item in the addedIdentities section
                                        $("#addedIdentities .form-group").each(function () {
                                            var identityType = $(this).find("label").text();
                                            var identityNumber = $(this).find("input").val();

                                            currentIdentities.push({
                                                IdentityType: identityType,
                                                IdentityNumber: identityNumber
                                            });
                                        });

                                        // Update the hidden field value with the current identities as a JSON string
                                        $("#identityDetails").val(JSON.stringify(currentIdentities));
                                    }



                                });
                            </script>

                            <div class="form-group col-md-3">
                                <label for="FirstName" class="mb-2">First Name<span style="color: red;">*</span></label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <select class="custom-select" id="NamePrefix" required name="NamePrefix" asp-for="NamePrefix">
                                            <option value="Select" @(Model != null && Model.NamePrefix == "Select" ? "selected" : "")>Select</option>
                                            <option value="MR." @(Model != null && Model.NamePrefix == "MR." ? "selected" : "")>MR.</option>
                                            <option value="MS." @(Model != null && Model.NamePrefix == "MS." ? "selected" : "")>MS.</option>
                                            <option value="SHRI" @(Model != null && Model.NamePrefix == "SHRI" ? "selected" : "")>SHRI</option>
                                            <option value="MRS." @(Model != null && Model.NamePrefix == "MRS." ? "selected" : "")>MRS.</option>
                                            <option value="SMT." @(Model != null && Model.NamePrefix == "SMT." ? "selected" : "")>SMT.</option>
                                            <option value="MISS" @(Model != null && Model.NamePrefix == "MISS" ? "selected" : "")>MISS</option>
                                            <option value="M/s" @(Model != null && Model.NamePrefix == "M/s" ? "selected" : "")>M/s</option>
                                            <option value="DR." @(Model != null && Model.NamePrefix == "DR." ? "selected" : "")>DR.</option>
                                            <option value="ER." @(Model != null && Model.NamePrefix == "ER." ? "selected" : "")>ER.</option>
                                            <option value="COL." @(Model != null && Model.NamePrefix == "COL." ? "selected" : "")>COL.</option>
                                            <option value="LT. COL." @(Model != null && Model.NamePrefix == "LT. COL." ? "selected" : "")>LT. COL.</option>
                                            <option value="CAPT." @(Model != null && Model.NamePrefix == "CAPT." ? "selected" : "")>CAPT.</option>
                                            <option value="MAJOR" @(Model != null && Model.NamePrefix == "MAJOR" ? "selected" : "")>MAJOR</option>
                                            <option value="SUBEDAR" @(Model != null && Model.NamePrefix == "SUBEDAR" ? "selected" : "")>SUBEDAR</option>
                                            <option value="PROF." @(Model != null && Model.NamePrefix == "PROF." ? "selected" : "")>PROF.</option>
                                            <option value="Master" @(Model != null && Model.NamePrefix == "Master" ? "selected" : "")>Master</option>
                                            <option value="BY" @(Model != null && Model.NamePrefix == "BY" ? "selected" : "")>BY</option>
                                            <option value="PANDIT" @(Model != null && Model.NamePrefix == "PANDIT" ? "selected" : "")>PANDIT</option>
                                            <option value="BRIGADIER" @(Model != null && Model.NamePrefix == "BRIGADIER" ? "selected" : "")>BRIGADIER</option>
                                            <option value="ACHARYA" @(Model != null && Model.NamePrefix == "ACHARYA" ? "selected" : "")>ACHARYA</option>
                                            <option value="WING COMMANDER" @(Model != null && Model.NamePrefix == "WING COMMANDER" ? "selected" : "")>WING C.</option>
                                            <option value="EX.SUB.MAJ" @(Model != null && Model.NamePrefix == "EX.SUB.MAJ" ? "selected" : "")>EX.SUB.MAJ</option>
                                            <!-- Add more options as needed -->
                                        </select>

                                    </div>
                                    <input type="text" value="@Model.FirstName" required class="form-control" asp-for="FirstName" placeholder="Enter first name" id="FirstName" name="FirstName" oninput="convertToUpperCase(this)">
                                </div>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="MiddleName" class="mb-2">Middle Name</label>
                                <input type="text" name="MiddleName" value="@Model.MiddleName" class="form-control" oninput="convertToUpperCase(this)" id="MiddleName" placeholder="Enter middle name" asp-for="MiddleName">
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="LastName" class="mb-2">Last Name</label>
                                <input type="text" name="LastName" value="@Model.LastName" class="form-control" oninput="convertToUpperCase(this)" id="LastName" placeholder="Enter last name" asp-for="LastName">
                            </div>


                            <div class="form-group col-lg-3">
                                <label for="Dateofbirth">Date Of Birth </label>
                                <input type="date" value="@Model.DateOfBirth?.ToString("yyyy-MM-dd")" class="form-control" id="DateOfBirth" asp-for="DateOfBirth" name="DateOfBirth">
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="InMemory">In Memory/Occession</label>
                                <textarea class="form-control" id="InMemory" name="InMemory" asp-for="InMemory" rows="1">@Model.InMemory</textarea>
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="">Company</label>
                                <input type="text" name="Company" value="@Model.Company" class="form-control" oninput="convertToUpperCase(this)" id="Company" asp-for="Company">
                            </div>

                        </div>
                    </div>
                </fieldset>
                <div id="letteraddress" class="show border rounded p-3">
                    <div class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon modal-header" type="button" data-toggle="collapse" data-target="#letteraddressContent" aria-expanded="false" aria-controls="letteraddressContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Letter Communication Address Details</span>
                        </button>
                    </div>

                    <div id="letteraddressContent" class="nested-form-container collapse ">

                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="Address1">Address1<span style="color: red;">*</span></label>
                                <textarea required class="form-control" name="Address1" asp-for="Address1" oninput="convertToUpperCase(this)" placeholder="E.g., House No. 123" id="Address1" rows="1">@Model.Address1</textarea>
                                <div style="color:#1cb8a1;font-weight:bold"></div>
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="Address1">Address2</label>
                                <textarea class="form-control" name="Address2" asp-for="Address2" oninput="convertToUpperCase(this)" placeholder="E.g. Street Name" id="Address2" rows="1">@Model.Address2</textarea>
                                <div style="color:#1cb8a1;font-weight:bold"></div>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="Address1">Address3</label>
                                <textarea class="form-control" name="Address3" asp-for="Address3" oninput="convertToUpperCase(this)" placeholder="E.g.Area, Landmark" id="Address3" rows="1">@Model.Address3</textarea>
                                <div style="color:#1cb8a1;font-weight:bold"></div>
                            </div>


                            <div class="form-group col-lg-3">
                                <label for="PinCode">PinCode<span style="color: red;">*</span></label>
                                <input type="number" value="@Model.PinCode" required id="PinCode1" name="PinCode" asp-for="PinCode" class="form-control" />
                            </div>
                            <script>
                                $(document).ready(function () {
                                    // Function to handle pin code change
                                    function handlePinCodeChange(enteredPinCode) {
                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetLocationDetailsByPinCode',
                                            type: 'GET',
                                            data: { pincode: enteredPinCode },
                                            success: function (response) {
                                                // Parse the nested JSON string inside the 'data' property
                                                var jsonData = JSON.parse(response.data);

                                                // Access the correct property names
                                                $('#CountryID').val(jsonData.CountryID);
                                                //$("#CurrencyID").val(jsonData.CountryID);
                                                // Populate State dropdown
                                                $('#StateID').empty().append('<option value="' + jsonData.StateID + '">' + jsonData.StateName + '</option>');

                                                // Populate District dropdown
                                                $('#DistrictID').empty().append('<option value="' + jsonData.DistrictID + '">' + jsonData.DistrictName + '</option>');

                                                var selectedCountryCode = jsonData.CountryCode;

                                                // Set the selected value in the dropdown based on text
                                                $('#countryCode option:contains("' + selectedCountryCode + '")').prop('selected', true);


                                                // If the value is not in the dropdown, set it to an empty string
                                                if ($('#countryCode').val() == null) {
                                                    $('#countryCode').val('');
                                                }


                                                var selectedCountry = jsonData.CountryID;

                                                $("#CurrencyID option").each(function () {
                                                    if ($(this).val() == selectedCountry) {
                                                        $(this).prop("selected", true);
                                                    } else {
                                                        $(this).prop("selected", false);
                                                    }
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error);
                                            }
                                        });
                                    }

                                    var initialPinCode = $('#PinCode1').val();
                                    if (initialPinCode) {
                                        handlePinCodeChange(initialPinCode);
                                    }

                                    // Bind blur event for PinCode input
                                    $('#PinCode1').blur(function () {
                                        var enteredPinCode = $(this).val();
                                        handlePinCodeChange(enteredPinCode);
                                    });


                                });

                            </script>

                            <div class="form-group col-lg-3">
                                <label for="CountryID">Country<span style="color: red;">*</span></label>
                                <select class="form-control" required id="CountryID" asp-for="CountryID" name="CountryID">
                                    <option value="" selected disabled>Select Country</option>
                                    @if (Model != null)
                                    {
                                        @foreach (var country in Model.CountryList)
                                        {
                                            <option value="@country.CountryId" data-countryname="@country.CountryName">@country.CountryName</option>
                                        }
                                    }
                                </select>
                                <input type="hidden" name="CountryName" asp-for="CountryName" id="country1hidden" />
                                <script>
                                    $(document).ready(function () {
                                        // Function to set selected item and update hidden field
                                        function setSelectedCountry() {
                                            var selectedCountryName = $("#CountryId").find("option:selected").data("countryname");
                                            $("#country1hidden").val(selectedCountryName);
                                            $('#countryCode').val($("#CountryId").val());
                                        }

                                        // Attach change event to the dropdown
                                        $("#CountryId").change(function () {
                                            setSelectedCountry();
                                        });

                                        // Set the selected item based on model's CountryID when the page loads
                                        var modelCountryID = parseInt('@Model.CountryId'); // Convert to number
                                        // Convert to string for comparison
                                        if (modelCountryID) {
                                            $("#CountryID").val(modelCountryID);
                                            setSelectedCountry(); // Update the hidden field
                                        }
                                    });
                                </script>
                            </div>



                            <script>
                                $(document).ready(function () {
                                    // Set the initial state of the currency dropdown
                                    updateCurrencyDropdown();

                                    // Handle change event on the country dropdown
                                    $("#CountryID").on("change", function () {
                                        updateCurrencyDropdown();
                                    });

                                    function updateCurrencyDropdown() {
                                        var selectedCountry = $('#CountryID').val();
                                        $("#CurrencyID option").each(function () {
                                            if ($(this).val() == selectedCountry) {
                                                $(this).prop("selected", true);
                                            } else {
                                                $(this).prop("selected", false);
                                            }
                                        });
                                    }
                                });
                            </script>

                            <div class="form-group col-lg-3">
                                <label for="StateID">State<span style="color: red;">*</span></label>
                                <select class="form-control" required asp-for="StateID" id="StateID" name="StateID">
                                    <option value="" selected disabled>Select State</option>
                                </select>
                            </div>

                            <script>
                                $(document).ready(function () {
                                    $('#CountryID').change(function () {
                                        var selectedCountryId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetStatesByCountry',
                                            type: 'GET',
                                            data: { countryId: selectedCountryId },
                                            success: function (response) {
                                                var data = JSON.parse(response.data);
                                                // Clear and populate state dropdown with retrieved states
                                                $('#StateID').empty().append('<option value="" selected disabled>Select State</option>');
                                                $.each(data, function (index, state) {
                                                    $('#StateID').append('<option value="' + state.StateId + '">' + state.StateName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });
                                    });
                                });
                            </script>



                            <div class="form-group col-lg-3">
                                <label for="DistrictID">District<span style="color: red;">*</span></label>
                                <select class="form-control" required asp-for="DistrictID" id="DistrictID" name="DistrictID">
                                    <option value="" selected disabled>Select District</option>
                                </select>
                            </div>

                            <script>
                                $(document).ready(function () {
                                    $('#StateID').change(function () {
                                        var selectedStateId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetDistrictsByState',
                                            type: 'GET',
                                            data: { stateId: selectedStateId },
                                            success: function (response) {
                                                var districtData = JSON.parse(response.data);
                                                // Clear and populate district dropdown with retrieved districts
                                                $('#DistrictID').empty().append('<option value="" selected disabled>Select District</option>');
                                                $.each(districtData, function (index, district) {
                                                    $('#DistrictID').append('<option value="' + district.DistrictID + '">' + district.DistrictName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });


                                    });
                                });
                            </script>


                            <div class="form-group col-lg-3">
                                <label for="CityID">City<span style="color: red;">*</span></label>

                                <select class="form-control" id="CityID" asp-for="CityID" name="CityID">
                                    <option selected disabled>Select City</option>
                                    @if (Model != null)
                                    {
                                        @foreach (var city in Model.CityList)
                                        {
                                            <option value="@city.CityID" @(Model.CityID == city.CityID ? "selected" : "")>
                                                @city.CityName
                                            </option>
                                        }
                                    }
                                </select>
                                <input type="hidden" id="CityName" name="CityName" />

                                <script>
                                    // Add a change event listener to the select element using jQuery
                                    $('#CityID').change(function () {
                                        var selectedCityName = $(this).find('option:selected').text();
                                        $('#CityName').val(selectedCityName);
                                    });
                                </script>
                            </div>

                            <div class="card-header text-center">

                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" name="IsPermanentAddressDiff" value="true" id="sameasabove" @(Model.IsPermanentAddressDiff.GetValueOrDefault() ? "checked" : "") />
                                    <label class="form-check-label" for="sameasabove">Is Permanent Address Different</label>
                                </div>

                            </div>


                        </div>
                    </div>
                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            // Function to toggle visibility based on checkbox state
                            function togglePermanentAddress() {
                                var permanentAddressFieldset = document.getElementById('permanentAddressFieldset');
                                var isDifferentCheckbox = document.getElementById('sameasabove');

                                // Check if the checkbox is checked
                                if (isDifferentCheckbox.checked) {
                                    permanentAddressFieldset.style.display = 'block';
                                } else {
                                    permanentAddressFieldset.style.display = 'none';
                                }
                            }

                            // Attach the function to the checkbox change event
                            document.getElementById('sameasabove').addEventListener('change', togglePermanentAddress);

                            // Initial call to set the initial state on page load
                            togglePermanentAddress();
                        });
                    </script>

                </div>
                <fieldset id="permanentAddressFieldset" class="show border rounded p-3" style="display: none;">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#permanentAddressContent" aria-expanded="false" aria-controls="permanentAddressContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Permanent Address Details</span>
                        </button>
                    </legend>

                    <div id="permanentAddressContent" class="nested-form-container collapse">

                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="Address1">Address1<span style="color: red;">*</span></label>
                                <textarea class="form-control" name="P_Address1" asp-for="P_Address1" oninput="convertToUpperCase(this)" placeholder="E.g., House No. 123" id="P_Address1" rows="1">@Model.P_Address1</textarea>
                                <div style="color:#1cb8a1;font-weight:bold"></div>
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="Address1">Address2</label>
                                <textarea class="form-control" name="P_Address2" asp-for="P_Address2" oninput="convertToUpperCase(this)" placeholder="E.g.Street Name" id="P_Address2" rows="1">@Model.P_Address2</textarea>
                                <div style="color:#1cb8a1;font-weight:bold"></div>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="Address1">Address3</label>
                                <textarea class="form-control" name="P_Address3" asp-for="P_Address3" oninput="convertToUpperCase(this)" placeholder="E.g. Area, Landmark" id="P_Address3" rows="1">@Model.P_Address3</textarea>
                                <div style="color:#1cb8a1;font-weight:bold"></div>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="PinCode">PinCode</label>
                                <input type="number" value="@Model.P_PinCode" id="PinCode2" name="P_PinCode" asp-for="P_PinCode" class="form-control" />
                            </div>
                            <script>
                                $(document).ready(function () {
                                    // Function to handle pin code change
                                    function handlePinCodeChange(enteredPinCode, countryID) {
                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetLocationDetailsByPinCode',
                                            type: 'GET',
                                            data: { pinCode: enteredPinCode },
                                            success: function (response) {
                                                // Parse the nested JSON string inside the 'data' property
                                                var jsonData = JSON.parse(response.data);

                                                // Populate Country dropdown
                                                $('#CountryID2').val(jsonData.CountryID);

                                                // Populate State dropdown
                                                $('#StateID2').empty().append('<option value="' + jsonData.StateID + '">' + jsonData.StateName + '</option>');

                                                // Populate District dropdown
                                                $('#DistrictID2').empty().append('<option value="' + jsonData.DistrictID + '">' + jsonData.DistrictName + '</option>');


                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error);
                                            }
                                        });
                                    }

                                    // Trigger blur event if the initial pin code has a value
                                    var initialPinCode2 = $('#PinCode2').val();
                                    if (initialPinCode2) {
                                        handlePinCodeChange(initialPinCode2);
                                    }

                                    // Bind blur event for PinCode2 input
                                    $('#PinCode2').blur(function () {
                                        var enteredPinCode2 = $(this).val();
                                        handlePinCodeChange(enteredPinCode2);
                                    });

                                    // Write additional logic here for the change events if needed
                                });

                            </script>

                            <div class="form-group col-lg-3">
                                <label for="CountryID">Country:</label>
                                <select class="form-control" id="CountryID2" asp-for="CountryID" name="CountryID">
                                    <option value="" selected disabled>Select Country</option>
                                    @if (Model != null)
                                    {
                                        @foreach (var country in Model.CountryList)
                                        {
                                            <option value="@country.CountryId">@country.CountryName</option>
                                        }

                                    }
                                </select>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="StateID">State</label>
                                <select class="form-control" id="StateID2" name="StateID">
                                    <option value="" selected disabled>Select State</option>
                                </select>
                            </div>
                            <script>
                                $(document).ready(function () {
                                    $('#CountryID2').change(function () {
                                        var selectedCountryId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetStatesByCountry',
                                            type: 'GET',
                                            data: { countryId: selectedCountryId },
                                            success: function (response) {
                                                var data = JSON.parse(response.data);
                                                // Clear and populate state dropdown with retrieved states
                                                $('#StateID2').empty().append('<option value="" selected disabled>Select State</option>');
                                                $.each(data, function (index, state) {
                                                    $('#StateID2').append('<option value="' + state.StateId + '">' + state.StateName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error); // Handle errors if any
                                            }
                                        });
                                    });
                                });
                            </script>


                            <div class="form-group col-lg-3">
                                <label for="DistrictID">District</label>
                                <select class="form-control" id="DistrictID2" name="DistrictID">
                                    <option value="" selected disabled>Select District</option>
                                </select>
                            </div>

                            <script>
                                $(document).ready(function () {
                                    $('#StateID2').change(function () {
                                        var selectedStateId = $(this).val();

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetDistrictsByState',
                                            type: 'GET',
                                            data: { stateId: selectedStateId },
                                            success: function (response) {
                                                var districtData = JSON.parse(response.data);
                                                // Clear and populate district dropdown with retrieved districts
                                                $('#DistrictID2').empty().append('<option value="" selected disabled>Select District</option>');
                                                $.each(districtData, function (index, district) {
                                                    $('#DistrictID2').append('<option value="' + district.DistrictID + '">' + district.DistrictName + '</option>');
                                                });
                                            },
                                            error: function (xhr, status, error) {
                                                console.log(error);
                                            }
                                        });


                                    });
                                });
                            </script>

                            <div class="form-group col-lg-3">
                                <label for="CityID">City</label>
                                <select class="form-control" id="CityID2" name="CityID">
                                    <option selected disabled>Select City</option>
                                    @if (Model != null)
                                    {
                                        @foreach (var city in Model.CityList)
                                        {
                                            <option value="@city.CityID" @(Model.P_CityID == city.CityID ? "selected" : "")>@city.CityName</option>
                                        }
                                    }
                                </select>
                                <input type="hidden" id="P_CityName" name="P_CityName" />

                                <script>
                                    // Add a change event listener to the select element using jQuery
                                    $('#CityID2').change(function () {
                                        var selectedCityName = $(this).find('option:selected').text();
                                        $('#P_CityName').val(selectedCityName);
                                    });
                                </script>
                            </div>


                        </div>
                    </div>

                </fieldset>

                <fieldset class="show border rounded p-3">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#contactDetailsContent" aria-expanded="false" aria-controls="contactDetailsContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Contact Details</span>
                        </button>
                    </legend>

                    <div id="contactDetailsContent" class="nested-form-container collapse">

                        <div class="row">

                            <div class="form-group col-lg-3">
                                <label for="contactType" class="mr-2">Contact Type<span style="color: red;">*</span></label>
                                <select class="form-control" id="contactType" name="contactType">
                                    <option value="Mobile">Mobile No.</option>
                                    <option value="WhatsApp">WhatsApp No.</option>
                                    <option value="Phone(O)">Office Phone</option>
                                    <option value="Phone(R)">Residence Phone</option>
                                    <option value="Email">Email ID</option>
                                </select>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="contactDetail" class="mr-2">Contact Detail<span style="color: red;">*</span></label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <select class="form-control" id="countryCode" asp-for="CountryCode" name="CountryCode">
                                            <option value="" selected disabled>Select</option>
                                            @if (Model != null)
                                            {
                                                @foreach (var countrycode in Model.CountryList)
                                                {
                                                    <option value="@countrycode.CountryId">@countrycode.CountryCode</option>
                                                }
                                            }
                                        </select>
                                    </div>

                                    <input type="text" class="form-control" id="contactDetail" name="contactDetail" placeholder="Enter your contact detail">
                                    <div class="input-group-append">
                                        <button class="btn btn-primary" type="button" id="addDetail"><i class="fas fa-plus"></i>Add</button>
                                    </div>
                                </div>
                            </div>


                            <table class="table table-bordered col-lg-3" style="visibility: hidden;" id="contactDetailsTable">
                                <thead>
                                    <tr>
                                        <th>Contact Type</th>
                                        <th>Country Code</th>
                                        <th>Contact Detail</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Table rows will be dynamically added here -->
                                </tbody>
                            </table>

                            <input type="hidden" asp-for="MobileList" name="MobileList" id="mobileListField" />

                            <script>
                                $(document).ready(function () {
                                    // Declare donorid variable at the beginning
                                    var donorid = $("#DonorID").val();

                                    $("#contactType").change(function () {
                                        var selectedContactType = $(this).val();
                                        if (selectedContactType === 'Email') {
                                            $("#countryCode").hide();
                                            $("#countryCodeHeader").hide();
                                            $("#contactDetail").attr("placeholder", "Enter your email");
                                        } else {
                                            $("#countryCode").show();
                                            $("#countryCodeHeader").show();
                                            $("#contactDetail").attr("placeholder", "Enter your contact detail");
                                        }
                                    });

                                    var mobileListJson = @Html.Raw(Model.MobileListJson);

                                    // If MobileListJson is null, use data from the model directly
                                    if (!mobileListJson) {
                                        // Use data from the model
                                        mobileListJson = @Html.Raw(JsonConvert.SerializeObject(Model.MobileList));
                                    }

                                    if (mobileListJson) {
                                        // Loop through each item in the JSON array
                                        $.each(mobileListJson, function (index, item) {
                                            // Add a new row to the table
                                            var newRowmobilelist = $("<tr>");
                                            newRowmobilelist.append("<td>" + item.ContactType + "</td>");
                                            newRowmobilelist.append("<td>" + item.CountryCode + "</td>");
                                            newRowmobilelist.append("<td>" + item.MobileNumber + "</td>");
                                            newRowmobilelist.append("<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>");

                                            // Add a special class to identify rows from MobileListJson
                                            newRowmobilelist.addClass("json-data-row");

                                            updateContactDetailsHiddenField();
                                            $("#contactDetailsTable tbody").append(newRowmobilelist);

                                            // Show the table
                                            $("#contactDetailsTable").css("visibility", "visible");
                                        });
                                    }

                                    $("#addDetail").on("click", function () {
                                        var ContactType = $("#contactType").val();
                                        var countryCode = $("#countryCode").find(':selected').text();
                                        var contactDetail = $("#contactDetail").val();
                                        var ReceiveHeadName = $('#IsReceiveHeadDiffrent').is(':checked') ?
                                            $("#ReceiveHeadName").find(':selected').text() :
                                            "@UserDepartment";

                                        var contactDetailPattern;

                                        if (ContactType === 'Email') {
                                            contactDetailPattern = /^[^\s]+[^\s]+\.[^\s]+$/;
                                            if (!contactDetailPattern.test(contactDetail)) {
                                                alert("Invalid email format. Please enter a valid email address.");
                                                return;
                                            }
                                        } else if (ContactType === 'Mobile') {
                                            // Check if the country code is +91 (India)
                                            if (countryCode === '+91') {
                                                contactDetailPattern = /^\d{10}$/; // 10 digits for India
                                            } else {
                                                // For other countries, remove validation or add specific validation patterns
                                                contactDetailPattern = /^\d+$/; // Example: Any number of digits
                                            }

                                            if (!contactDetailPattern.test(contactDetail)) {
                                                alert("Invalid mobile number format for the selected country code. Please enter a valid mobile number.");
                                                return;
                                            }
                                        } else {
                                            // Add additional validation for other contact types if needed
                                        }

                                        var newRowContactDetails = $("<tr>");
                                        newRowContactDetails.append("<td>" + ContactType + "</td>");
                                        newRowContactDetails.append("<td>" + (ContactType === 'Email' ? '' : countryCode) + "</td>");
                                        newRowContactDetails.append("<td>" + contactDetail + "</td>");
                                        newRowContactDetails.append("<td style='display:none'>" + donorid + "</td>");
                                        newRowContactDetails.append("<td style='display:none'>" + ReceiveHeadName + "</td>");
                                        newRowContactDetails.append("<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>");

                                        newRowContactDetails.addClass("manual-data-row");

                                        $("#contactDetailsTable tbody").append(newRowContactDetails);
                                        updateContactDetailsHiddenField();
                                        $("#contactDetailsTable").css("visibility", "visible");
                                        $("#contactDetail").val("");
                                    });

                                    $("#contactDetailsTable").on("click", ".delete-row", function () {
                                        var row = $(this).closest("tr");
                                        row.remove();
                                        updateContactDetailsHiddenField();

                                        if ($("#contactDetailsTable tbody tr").length === 0) {
                                            $("#contactDetailsTable").css("visibility", "hidden");
                                        }
                                    });

                                    function updateContactDetailsHiddenField() {
                                        var tableDataContactDetails = [];

                                        $("#contactDetailsTable tbody tr").each(function () {
                                            var rowDataContactDetails = {};
                                            $(this).find("td").each(function (index, element) {
                                                if (index === 0) {
                                                    rowDataContactDetails.ContactType = $(element).text();
                                                } else if (index === 1) {
                                                    rowDataContactDetails.CountryCode = $(element).text();
                                                } else if (index === 2) {
                                                    rowDataContactDetails.ContactDetail = $(element).text();
                                                }
                                            });

                                            tableDataContactDetails.push(rowDataContactDetails);
                                        });

                                        $("#mobileListField").val(JSON.stringify(tableDataContactDetails));
                                    }
                                });
                            </script>

                        </div>
                    </div>
                </fieldset>

                <fieldset class="show border rounded p-3">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#identityDetailsContent" aria-expanded="false" aria-controls="identityDetailsContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Identity Details</span>
                        </button>
                    </legend>

                    <div id="identityDetailsContent" class="nested-form-container collapse">

                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label for="IdentityType">Identity Type</label>
                                <select class="form-control" id="identityType">
                                    <option value="0">Select</option>
                                    <option value="Aadhar">Aadhar</option>
                                    <option value="PAN">PAN</option>
                                    <option value="Passport">Passport</option>
                                    <option value="DrivingLicence">Driving Licence</option>
                                    <option value="RationCard">Ration Card</option>
                                    <option value="VoterID">Voter ID</option>
                                    <option value="TaxID">Tax Identification</option>
                                    <!-- Add more identity types as needed -->
                                </select>
                            </div>

                            <div class="form-group col-lg-3">
                                <label for="IdentityNumber">Identity Number</label>
                                <input class="form-control" id="identityNumber" type="text" name="" />
                            </div>
                            <script>
                                $(document).ready(function () {
                                    // Add an event listener for identity type change
                                    $('#identityType').change(function () {
                                        // Get the selected identity type
                                        var selectedIdentityType = $(this).val();

                                        // Set the watermark text based on the selected identity type
                                        var watermarkText = getWatermarkText(selectedIdentityType);

                                        // Apply the watermark to the identity number input
                                        $('#identityNumber').attr('placeholder', watermarkText);
                                    });

                                    // Function to get watermark text based on identity type
                                    function getWatermarkText(identityType) {
                                        switch (identityType) {
                                            case 'Aadhar':
                                                return 'Enter Aadhar Number';
                                            case 'PAN':
                                                return 'Enter PAN Number';
                                            case 'Passport':
                                                return 'Enter Passport Number';
                                            case 'DrivingLicence':
                                                return 'Enter Driving Licence Number';
                                            case 'RationCard':
                                                return 'Enter Ration Card Number';
                                            case 'VoterID':
                                                return 'Enter Voter ID Number';
                                            case 'TaxID':
                                                return 'Enter Tax Identification Number';
                                            default:
                                                return 'Enter Identity Number';
                                        }
                                    }
                                });
                            </script>
                            <div class="form-group col-lg-3">
                                <br />
                                <button class="btn btn-primary" type="button" id="addIdentity"><i class="fas fa-plus"></i>Add Identity</button>
                            </div>
                        </div>

                        <div class="row" id="addedIdentities" style="display: none;">
                            <!-- Added identities will be dynamically inserted here -->
                        </div>
                    </div>
                </fieldset>
                <input type="hidden" id="identityDetails" name="IdentityList" asp-for="IdentityList" />

                <script>
                    $(document).ready(function () {
                        var donorid = $("#DonorID").val();
                        var identityListJson = @Html.Raw(Model.IdentityListJson);

                        // If IdentityListJson is null, use data from the model directly
                        if (!identityListJson) {
                            // Use data from the model
                            identityListJson = @Html.Raw(JsonConvert.SerializeObject(Model.IdentityList));
                        }

                        if (identityListJson) {
                            // Log the parsed JSON for debugging
                            console.log("Parsed Identity List:", identityListJson);

                            // Loop through each item in the JSON array
                            $.each(identityListJson, function (index, identity) {
                                // Log each identity for debugging
                                console.log("Identity:", identity);

                                // Ensure that identityType and identityNumber are accessed correctly
                                var type = identity.identityType;
                                var number = identity.identityNumber;

                                var existingIdentities = JSON.parse($("#identityDetails").val() || '[]');

                                // Add the new identity to the array
                                existingIdentities.push(identity);

                                // Set the JSON stringified identities to the hidden input
                                $("#identityDetails").val(JSON.stringify(existingIdentities));

                                // Create a new row for the added identity
                                var newRowidentityList = $("<div class='form-group col-lg-3'>");
                                newRowidentityList.append("<label for='" + identity.identityType + "'>" + identity.identityType + "</label>");
                                newRowidentityList.append("<input class='form-control' id='" + identity.identityType + "' type='text' value='" + identity.identityNumber + "' readonly />");
                                // newRow.append("<button class='btn btn-danger btn-sm delete-identity'>Delete</button>");

                                // Append the new row to the container
                                $("#addedIdentities").append(newRowidentityList);

                                // Show the added identities section
                                $("#addedIdentities").css("display", "flex");
                            });

                            // Update the hidden field value with the existing identities
                            updateHiddenField(identityListJson);

                            // Show the added identities section
                            $("#addedIdentities").css("display", "flex");
                        }

                        $("#addIdentity").on("click", function () {
                            // Get selected identity type and number
                            var selectedIdentityType = $("#identityType").val();
                            var identityNumber = $("#identityNumber").val().trim();

                            // Validate input and identity number based on type
                            var isValid = validateIdentity(selectedIdentityType, identityNumber);

                            if (!isValid) {
                                return;
                            }
                            var ReceiveHeadName = '';

                            if ($('#IsReceiveHeadDiffrent').is(':checked')) {
                                ReceiveHeadName = $("#ReceiveHeadName").find(':selected').text();
                            } else {
                                ReceiveHeadName = "@UserDepartment";
                            }
                            // Check if an identity of the same type already exists
                            var existingIdentities = JSON.parse($("#identityDetails").val() || '[]');
                            var existingIdentity = existingIdentities.find(function (identity) {
                                return identity.IdentityType === selectedIdentityType;
                            });

                            if (existingIdentity) {
                                alert("Identity of type " + selectedIdentityType + " already exists. You cannot add it again.");
                                return;
                            }

                            // Create a new object for the added identity
                            var identity = {
                                IdentityType: selectedIdentityType,
                                IdentityNumber: identityNumber,
                                DonorID: donorid,
                                ReceiveHead: ReceiveHeadName
                            };

                            // Append the new identity to the container
                            appendIdentityToContainer(identity);

                            // Update the hidden field value with the updated identities
                            updateHiddenField();

                            // Clear input fields
                            $("#identityType").val("0");
                            $("#identityNumber").val("");
                            $("#identityNumber").attr("placeholder", "");
                        });

                        // Delete Identity button click event
                        $(document).on("click", ".delete-identity", function (event) {
                            // Prevent the default action (e.g., form submission)
                            event.preventDefault();

                            // Your existing delete logic here...

                            // For example, you can get the parent div and remove it
                            var parentDiv = $(this).closest(".form-group");
                            parentDiv.remove();

                            // Update the hidden field value with the updated identities
                            updateHiddenField();

                            // Your existing logic to update the hidden input and other actions...
                        });

                        // Function to validate identity number based on the selected identity type
                        // Function to validate identity number based on the selected identity type
                        function validateIdentity(identityType, identityNumber) {
                            // Validate based on identity type
                            switch (identityType) {
                                case 'Aadhar':
                                    // Aadhar validation: 12 digits
                                    if (!/^\d{12}$/.test(identityNumber)) {
                                        alert("Invalid Aadhar number format. Please enter 12 digits.");
                                        return false;
                                    }
                                    break;
                                case 'PAN':
                                    // PAN validation: Uppercase letters and numbers, total 10 characters
                                    if (!/^[A-Z]{5}\d{4}[A-Z]{1}$/.test(identityNumber)) {
                                        alert("Invalid PAN number format. Please enter a valid PAN.");
                                        return false;
                                    }
                                    break;
                                // Add more cases for other identity types if needed
                            }

                            // Validation passed
                            return true;
                        }


                        // Function to append an identity to the addedIdentities section
                        function appendIdentityToContainer(identity) {
                            // Collect existing identities from the hidden field
                            var existingIdentities = JSON.parse($("#identityDetails").val() || '[]');

                            // Add the new identity to the array
                            existingIdentities.push(identity);

                            // Set the JSON stringified identities to the hidden input
                            $("#identityDetails").val(JSON.stringify(existingIdentities));

                            // Create a new row for the added identity
                            var newRowidentitydetails = $("<div class='form-group col-lg-3'>");
                            newRowidentitydetails.append("<label for='" + identity.IdentityType + "'>" + identity.IdentityType + "</label>");
                            newRowidentitydetails.append("<input class='form-control' id='" + identity.IdentityType + "' type='text' value='" + identity.IdentityNumber + "' readonly />");
                            newRowidentitydetails.append("<input style='display:none'  id='" + identity.IdentityType + "' type='text' value='" + identity.DonorID + "' readonly />");
                            newRowidentitydetails.append("<input  style='display:none' id='" + identity.IdentityType + "' type='text' value='" + identity.ReceiveHead + "' readonly />");
                            newRowidentitydetails.append("<button class='btn btn-danger btn-sm delete-identity'>Delete</button>");

                            // Append the new row to the container
                            $("#addedIdentities").append(newRowidentitydetails);

                            // Show the added identities section
                            $("#addedIdentities").css("display", "flex");
                        }

                        // Function to update the hidden field value with the current identities
                        function updateHiddenField() {
                            var currentIdentities = [];

                            // Loop through each item in the addedIdentities section
                            $("#addedIdentities .form-group").each(function () {
                                var identityType = $(this).find("label").text();
                                var identityNumber = $(this).find("input").val();

                                currentIdentities.push({
                                    IdentityType: identityType,
                                    IdentityNumber: identityNumber,
                                    DonorID: donorid,
                                    ReceiveHead: ReceiveHeadName
                                });
                            });

                            // Update the hidden field value with the current identities
                            $("#identityDetails").val(JSON.stringify(currentIdentities));
                        }
                    });


                </script>

                <fieldset class="show border rounded p-3">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#DivProvisonalDetails" aria-expanded="false" aria-controls="DivProvisonalDetails">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Provisional Details</span>
                        </button>
                    </legend>

                    <div id="DivProvisonalDetails" class="nested-form-container collapse">
                        <div class="row">
                            <div class="form-group col-lg-3">
                                <label>Receipt Book Type</label>
                                <select id="RbType" class="form-control" name="RbTpe" asp-for="RbTpe">
                                    <option value="" selected disabled>Select</option>
                                    @if (Model != null)
                                    {
                                        foreach (var rbtype in Model.ReceiptBookTypeList)
                                        {
                                            <option value="@rbtype.RB_Type_Code" data-rbtype="@rbtype.RB_Type" @(Model.RBType == rbtype.RB_Type ? "selected" : "")>@rbtype.RB_Type</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="Prov. No">Prov. No<span style="color: red;">*</span></label>
                                <input class="form-control" value="@Model.ProvNo" id="ProvNo" type="number" name="ProvNo" asp-for="ProvNo" />
                                <script>
                                    $(document).ready(function () {
                                        $('#ProvNo').change(function () {

                                            var receiptNo = $('#ProvNo').val();
                                            var tp = $('#RbType option:selected').text();
                                            var dataFlag = 'GANGOTRI';

                                            if (tp === null || tp === undefined || tp.trim() === "") {
                                                alert('Please select Provisional Book Type first.');
                                                return;
                                            }

                                            $.ajax({
                                                url: '/NationalGangotri/DonationReceiveMaster/GetPersonbyProvisonal',
                                                type: 'GET',
                                                data: {
                                                    ReceiptNo: receiptNo,
                                                    TP: tp,
                                                    DataFlag: dataFlag
                                                },
                                                contentType: 'application/json',
                                                success: function (response) {

                                                    var personName = response.personName;


                                                    $('#PersonName').val(personName);
                                                },
                                                error: function (xhr, status, error) {
                                                    console.log(error);
                                                }
                                            });
                                        });
                                    });
                                </script>

                            </div>
                            <div class="form-group col-lg-3">
                                <label for="Prov. Date">Prov. Date<span style="color: red;">*</span></label>
                                <input class="form-control" value="@Model.ProvDate?.ToString("yyyy-MM-dd")" id="ProvDate" type="date" name="ProvDate" asp-for="ProvDate" />
                            </div>
                            <div class="form-group col-lg-3">
                                <label for="">Person Name</label>
                                <input class="form-control" value="@Model.PersonName" id="PersonName" type="text" name="PersonName" asp-for="PersonName" />
                            </div>
                            <div class="form-group col-lg-3" data-input-id="file1">

                                @if (!string.IsNullOrEmpty(Model.Doc1))
                                {
                                    <label for="file1">Attached Provisional</label>


                                    var fileNames = Model.Doc1.Split(',').Select(x => x.Trim()).ToList();
                                    for (int i = 0; i < fileNames.Count; i++)
                                    {
                                        var simplifiedFileName = $"File {i + 1}";
                                        <div><a class="btn btn-outline-primary view-btn" data-file-name="@fileNames[i]"><i class="fa fa-eye"></i>View @simplifiedFileName</a></div>
                                    }

                                }
                                else
                                {
                                    <label for="file1" data-browse="Browse">Attach Provisional</label>

                                    <input type="file" name="DocProvisonal" multiple asp-for="DocProvisonal" id="file1" accept="image/*,application/pdf">



                                }
                            </div>

                            <script>
                                $(document).ready(function () {
                                    // Attach a click event to dynamically generated view buttons
                                    $(document).on('click', '.view-btn', function () {
                                        var fileName = $(this).data('file-name');
                                        window.open('/DocDonationReceive/' + fileName, '_blank');
                                    });
                                });
                            </script>
                        </div>
                    </div>
                </fieldset>
                <fieldset class="show border rounded p-3">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#donationDetailsContent" aria-expanded="false" aria-controls="donationDetailsContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Donation Details</span>
                        </button>
                    </legend>

                    <div id="donationDetailsContent" class="nested-form-container collapse show">

                        <div class="row">

                            <div class="form-group col-lg-3">
                                <label for="PaymentMode">Donation Mode<span style="color: red;">*</span></label>
                                <select id="PaymentMode" required class="form-control" name="PaymentMode" asp-for="PaymentMode" onchange="toggleMaterialFields()">
                                    <option value="" selected disabled>Select Donation Mode</option>
                                    @if (Model != null)
                                    {
                                        foreach (var paymentmode in Model.paymentModeList)
                                        {
                                            <option value="@paymentmode.PaymentModeID" data-paymentmode="@paymentmode.PaymentModeName" @(Model.PaymentModeID == paymentmode.PaymentModeID ? "selected" : "")>@paymentmode.PaymentModeName</option>
                                        }
                                    }
                                </select>
                                <input type="hidden" id="hdnpaymentmode" name="PaymentModeName" asp-for="PaymentModeName" />
                                <!-- Include a hidden field for PaymentModeID -->
                                <input type="hidden" id="hdnpaymentmodeid" name="PaymentModeID" asp-for="PaymentModeID" />

                                <script>
                                    window.onload = function () {
                                        toggleMaterialFields();
                                    };

                                    function toggleMaterialFields() {
                                        var paymentModeDropdown = document.getElementById('PaymentMode');
                                        var materialDepositFields = document.getElementById('materialDepositFields');
                                        var materialFields = document.getElementById('materialFields');
                                        var currencyAmountFields = document.getElementById('currencyAmountFields');
                                        var materialDepositIDTextbox = document.getElementById('MaterialDepositID');
                                        var materialInputTextarea = document.getElementById('materialInput');
                                        var currencyDropdown = document.getElementById('CurrencyID');
                                        var amountInput = document.getElementById('Amount');
                                        var divbankdetails = document.getElementById('divbankdetails');
                                        var TotalAmount = document.getElementById('DivTotalAmount');
                                        var divMultiCheque = document.getElementById('divMultiCheque');
                                        var lbl_multiDoc = document.getElementById('lbl_doc_multi');
                                        var divordertype = document.getElementById('DivOrderType');
                                        var divordernumber = document.getElementById('DivOrderNumber');

                                        // Get the selected text instead of the value
                                        var selectedText = paymentModeDropdown.options[paymentModeDropdown.selectedIndex].text;

                                        // Check if the selected text is "MATERIAL"
                                        if (selectedText === 'MATERIAL') {
                                            materialDepositFields.style.display = 'block';
                                            materialFields.style.display = 'block';
                                            currencyAmountFields.style.display = 'none';
                                            TotalAmount.style.display = 'none';
                                            // Set required attribute dynamically
                                            materialDepositIDTextbox.required = true;
                                            materialInputTextarea.required = true;
                                            currencyDropdown.required = false;
                                            amountInput.required = false;
                                            materialDepositIDTextbox.focus(); // Focus on Material Deposit ID textbox
                                        } else {
                                            materialDepositFields.style.display = 'none';
                                            materialFields.style.display = 'none';
                                            currencyAmountFields.style.display = 'block';
                                            // TotalAmount.style.display = 'block';
                                            // Remove required attribute dynamically
                                            materialDepositIDTextbox.required = false;
                                            materialInputTextarea.required = false;
                                            currencyDropdown.required = true;
                                            amountInput.required = true;
                                        }

                                        // Simplify the condition for divbankdetails display
                                        divbankdetails.style.display = selectedText === 'MATERIAL' || selectedText === 'CASH' ? 'none' : 'block';

                                        if (selectedText === 'CHEQUE' || selectedText === 'PAY-IN-SLIP') {
                                            divMultiCheque.style.display = 'block';
                                            lbl_multiDoc.innerText = selectedText === 'CHEQUE' ? 'Attach Cheque Doc' : 'Attach Pay-In-Slip Doc';
                                        } else {
                                            divMultiCheque.style.display = 'none';
                                        }

                                        if (selectedText === 'ONLINE') {
                                            divordernumber.style.display = 'block';
                                            divordertype.style.display = 'block';
                                        } else {
                                            divordernumber.style.display = 'none';
                                            divordertype.style.display = 'none';
                                        }
                                    }

                                    // Call the function initially to set the initial state
                                    toggleMaterialFields();
                                </script>


                                <script>
                                    $(document).ready(function () {
                                        var modelPaymentModeID = parseInt('@Model.PaymentModeID');
                                        if (modelPaymentModeID) {
                                            $("#PaymentMode").val(modelPaymentModeID);
                                        }

                                        // Attach the change event to update the hidden fields
                                        $("#PaymentMode").change(function () {
                                            var selectedOption = $(this).find("option:selected");
                                            var paymentModeName = selectedOption.data("paymentmode");
                                            var paymentModeID = selectedOption.val();

                                            $("#hdnpaymentmode").val(paymentModeName);
                                            $("#hdnpaymentmodeid").val(paymentModeID);
                                        });
                                    });
                                </script>
                            </div>
                            <script>
                                $(document).ready(function () {
                                    $('#Amount').on('blur', function () {
                                        validateAmount();
                                    });

                                    function updateTotalAmount() {
                                        var selectedPaymentMode = $('#PaymentMode option:selected').data('paymentmode');
                                        var amount = parseFloat($('#Amount').val()) || 0;

                                        $('#TotalAmount').val(amount.toFixed(2));
                                        $('#receiveamount').val(amount.toFixed(2));

                                    }

                                    function validateAmount() {
                                        var selectedPaymentMode = $('#PaymentMode option:selected').data('paymentmode');
                                        var amount = parseFloat($('#Amount').val()) || 0;

                                        if (selectedPaymentMode === 'CASH' && amount > 200000) {
                                            alert('Amount cannot be more than 2 lac for Cash payment mode.');
                                            // Clear the input field
                                            $('#Amount').val('');
                                        }

                                        updateTotalAmount(); // Call updateTotalAmount to set TotalAmount if necessary
                                    }
                                });
                            </script>

                            <div class="form-group col-lg-3" id="currencyAmountFields">
                                <label for="currency" class="mb-2">Donation Amount<span style="color: red;">*</span></label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <select class="custom-select" asp-for="CurrencyID" id="CurrencyID" name="CurrencyID">
                                            <option value="" disabled>Select</option>
                                            @if (Model != null)
                                            {
                                                @foreach (var currency in Model.currenciesList)
                                                {
                                                    <option value="@currency.CurrencyID" data-currencycode="@currency.CurrencyCode" @(Model.CurrencyID == currency.CurrencyID ? "selected" : "")>@currency.CurrencyCode</option>
                                                }
                                            }
                                        </select>

                                        <input type="hidden" id="hdncurrncycode" name="CurrencyCode" asp-for="CurrencyCode" />

                                        <script>
                                            $(document).ready(function () {

                                                function updateHiddenField() {
                                                    var selectedItem = $("#CurrencyID option:selected").data("currencycode");
                                                    $("#hdncurrncycode").val(selectedItem);
                                                }


                                                $("#CurrencyID").change(updateHiddenField);

                                                updateHiddenField();
                                            });
                                        </script>

                                    </div>
                                    <input type="number" placeholder="Amount" value="@((Model.TotalAmount.GetValueOrDefault() == 0) ? "" : Model.TotalAmount.GetValueOrDefault())" asp-for="Amount" name="Amount" class="form-control" id="Amount">
                                </div>
                            </div>

                            <div class="form-group col-lg-3" id="DivOrderType" style="display: none;">
                                <label for="">Order Type</label>
                                <select class="custom-select" asp-for="OrderTypeID" id="OrderType" name="OrderTypeID">
                                    <option value="">Select</option>
                                    @if (Model.ordertypelist != null)
                                    {
                                        @foreach (var order in Model.ordertypelist)
                                        {
                                            <option value="@order.OrderTypeID" data-currencycode="@order.OrderTypeName" @(Model.OrderTypeID.GetValueOrDefault() == order.OrderTypeID ? "selected" : "")>@order.OrderTypeName</option>
                                        }
                                    }

                                </select>
                                <input type="hidden" id="hdnorderType" name="OrderTypeName">
                                <script>
                                    $(document).ready(function () {

                                        $('#OrderType').change(function () {
                                            var selectedText = $('#OrderType option:selected').text();
                                            var selectedValue = $('#OrderType').val();
                                            $('#hdnorderType').val(selectedText);
                                        });
                                    });
                                </script>
                            </div>
                            <div class="form-group col-lg-3" id="DivOrderNumber" style="display: none;">
                                <label for="">Order Number</label>
                                <input class="form-control" value="@Model.OrderNumber" id="OrderNumber" placeholder="please enter order no." type="text" name="OrderNumber" asp-for="OrderNumber" />
                            </div>
                            <div class="form-group col-lg-3" id="materialDepositFields" style="display: none;">
                                <label for="MaterialDepositID">Material Deposit ID<span style="color: red;">*</span></label>
                                <input class="form-control" value="@Model.MaterialDepositID" id="MaterialDepositID" type="text" name="MaterialDepositID" asp-for="MaterialDepositID" />
                            </div>

                            <div class="form-group col-lg-3" id="materialFields" style="display: none;">
                                <label for="materialInput">Material Description<span style="color: red;">*</span></label>
                                <textarea class="form-control" oninput="convertToUpperCase(this)" id="materialInput" rows="2" name="Material" asp-for="Material">@Model.Material</textarea>
                            </div>
                            <div class="form-group col-lg-3" id="DivTotalAmount" style="display: none;">
                                <label for="Amount">Total Amount</label>
                                <input class="form-control" id="TotalAmount" name="TotalAmount" asp-for="TotalAmount" readonly value="@Model.TotalAmount" />
                                <input value="@Model.TotalAmount" id="hdnTotalAmount" type="hidden" name="TotalAmount" asp-for="TotalAmount" />
                            </div>


                            <div id="divbankdetails" style="display:none;">
                                <div class="row">
                                    <div class="form-group col-lg-2">
                                        <label for="bankName">Bank Name</label>
                                        <select class="form-control" name="BankID" id="BankID1" asp-for="BankID">
                                            <option value="" selected disabled>Select Bank</option>
                                            @if (Model != null)
                                            {
                                                @foreach (var bank in Model.bankmasterlist)
                                                {
                                                    <option value="@bank.BankID">@bank.BankName</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="chequedate">Cheque/Draft Date</label>
                                        <input class="form-control" id="chequedate" type="date" name="chequedate" />
                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="cheuqueno">Cheque/Draft No</label>
                                        <input class="form-control" id="cheuqueno" type="number" name="cheuqueno" />
                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="depositBank">Deposit Bank</label>

                                        <select class="form-control" name="BankID" id="BankID2" asp-for="BankID">
                                            <option value="" selected disabled>Select Bank</option>
                                            @if (Model != null)
                                            {
                                                @foreach (var bank in Model.depositBankmaster)
                                                {
                                                    <option value="@bank.bank_code">@bank.Bank_Name</option>
                                                }
                                            }
                                        </select>

                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="depositDate">Deposit Date</label>
                                        <input class="form-control" id="depositDate" type="date" name="depositDate" />
                                    </div>

                                    <div class="form-group col-lg-1" id="divMultiCheque" style="display:none;">
                                        <label for="lbl_doc_multi" id="lbl_doc_multi"></label>
                                        <input type="file" asp-for="DocCheque" name="DocCheque" id="filemultiCheque" accept="image/*,application/pdf" />
                                    </div>


                                    <div class="form-group col-lg-1">
                                        <br />
                                        <button class="btn btn-primary" id="BtnAddBankDetails"><i class="fa fa-plus"></i>Add</button>
                                    </div>
                                    <input type="hidden" asp-for="BankDetailsList" name="BankDetailsList" id="hiddenBankDetails" />
                                </div>
                            </div>
                            <input type="hidden" id="hiddenTempFilename" />

                            <script>
                                $(document).ready(function () {
                                    $('#filemultiCheque').change(function () {
                                        var fileInput = this;
                                        var file = fileInput.files[0];

                                        if (file) {
                                            // Create FormData object and append the file to it
                                            var formData = new FormData();
                                            formData.append('DocCheque', file);

                                            // Perform AJAX request
                                            $.ajax({
                                                url: '/NationalGangotri/DonationReceiveMaster/TemporaryUploadFile',
                                                type: 'POST',
                                                data: formData,
                                                processData: false,
                                                contentType: false,
                                                success: function (response) {

                                                    $('#hiddenTempFilename').val(response.uniqueFileName);

                                                    // Handle success, if needed
                                                    console.log('File uploaded successfully:', response);
                                                },
                                                error: function (error) {
                                                    // Handle error
                                                    console.log('Error uploading file:', error);
                                                }
                                            });
                                        }
                                    });
                                });
                            </script>
                            <script>
                                $(document).ready(function () {
                                    var currentFinancialYearEnd;

                                    $('#depositDate').on('blur', function () {
                                        validateDepositDate();
                                    });

                                    function validateDepositDate() {
                                        var depositDate = new Date($('#depositDate').val());
                                        var currentDate = new Date();

                                        // Calculate the start and end dates of the current and previous Indian financial years
                                        var currentFinancialYearStart = new Date(currentDate.getFullYear(), 3, 1); // Financial year starts on April 1st
                                        var previousFinancialYearStart = new Date(currentDate.getFullYear() - 1, 3, 1); // Start of the previous financial year
                                        currentFinancialYearEnd = new Date(currentDate.getFullYear(), 2, 31); // End of the current financial year

                                        if (depositDate < previousFinancialYearStart || depositDate > currentFinancialYearEnd) {
                                            alert('Receive ID cannot be credited if the deposit date is not within the current or previous Indian financial year.');
                                            // You can add additional handling here, such as clearing the date input or showing a message
                                            $('#depositDate').val(''); // Clear the date input
                                        }
                                    }
                                });
                            </script>

                            <div class="col-12">
                                <div class="table-responsive">
                                    <table class="table table-bordered" style="display:none;" id="bankDetailsTable">
                                        <thead>
                                            <tr>
                                                <th>Donation Mode</th>
                                                <th>Bank Name</th>
                                                <th>Cheque/Draft Date</th>
                                                <th>Cheque/Draft No.</th>
                                                <th>Deposit Bank</th>
                                                <th>Deposit Date</th>
                                                <th>Currency</th>
                                                <th>Amount</th>
                                                <th>PDC Cheque</th>
                                                <th>Document</th>
                                                <th style="display:none"></th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Table rows will be added dynamically here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <script>
                                $(document).ready(function () {

                                    // Parse the JSON data from the model for bank details
                                    var bankDetailsListJson = @Html.Raw(Model.BankDetailsListJson);

                                    // If BankDetailsListJson is null, use data from the model directly
                                    if (!bankDetailsListJson) {
                                        // Use data from the model
                                        bankDetailsListJson = @Html.Raw(JsonConvert.SerializeObject(Model.BankDetailsList));
                                    }

                                    if (bankDetailsListJson && bankDetailsListJson.length > 0) {
                                        // Loop through each item in the JSON array
                                        $.each(bankDetailsListJson, function (index, bankDetails) {
                                            // Map property names if needed
                                            var mappedBankDetails = {
                                                DonationMode: bankDetails.DonationMode,
                                                BankName: bankDetails.BankName,
                                                ChequeOrDraftDate: bankDetails.ChequeOrDraftDate,
                                                ChequeOrDraftNo: bankDetails.ChequeOrDraftNo,
                                                DepositeBankName: bankDetails.DepositeBankName,
                                                DepositeDate: bankDetails.DepositeDate,
                                                CurrencyCode: bankDetails.CurrencyCode,
                                                Amount: bankDetails.Amount,
                                                IsPdcCheque1: bankDetails.IsPdcCheque1,
                                                Doc: bankDetails.FileName
                                                // Add more mappings as needed
                                            };

                                            // Add a new row to the table
                                            OnModeladdBankDetailsRow(mappedBankDetails);
                                        });

                                        // Show the table after adding data
                                        $("#bankDetailsTable").show();
                                    }

                                    function updateTotalAmount() {
                                        var totalAmount = 0;

                                        // Loop through each row in the bank details table
                                        $("#bankDetailsTable tbody tr").each(function () {
                                            // Get the amount from the "Amount" column in the current row
                                            var amount = parseFloat($(this).find("td:eq(7)").text());

                                            // Add the amount to the total
                                            totalAmount += amount;
                                        });

                                        // Update the Total Amount field with the calculated total
                                        $("#TotalAmount").val(totalAmount.toFixed(2));
                                        $("#hdnTotalAmount").val(totalAmount.toFixed(2));
                                        $("#receiveamount").val(totalAmount.toFixed(2));

                                    }


                                    // Flag to check if a row with a donation mode has been added
                                    var donationModeAdded = false;
                                    var addedDonationMode = null;

                                    //currency flag
                                    var currencyAdded = false;
                                    var addedcurrency = null;

                                    $("#BtnAddBankDetails").on("click", function (event) {
                                        event.preventDefault();

                                        // Get values from input fields
                                        var selectedPaymentMode = $("#PaymentMode option:selected").text();
                                        var bankName = $("#BankID1 option:selected").text();
                                        var Cheuquedate = $("#chequedate").val();
                                        var Cheuqueno = $("#cheuqueno").val();
                                        var depositBank = $("#BankID2 option:selected").text();
                                        var depositDate = $("#depositDate").val();
                                        var Currency = $("#CurrencyID option:selected").text();
                                        var amount = $("#Amount").val();
                                        // Convert Cheuquedate to a Date object
                                        var chequeDateObj = new Date(Cheuquedate);
                                        var today = new Date();

                                        var pdcCheque1;

                                        // Check if Cheuquedate is greater than today's date
                                        if (chequeDateObj > today) {
                                            pdcCheque1 = "Yes";
                                        } else {
                                            pdcCheque1 = "No";
                                        }

                                        // Check if a row with a donation mode has already been added
                                        if (donationModeAdded) {
                                            // Donation mode already added, allow adding only if the mode is the same
                                            if (selectedPaymentMode !== addedDonationMode) {
                                                alert("You can only add rows with the same donation mode.");
                                                return;
                                            }
                                        } else {
                                            // Donation mode not added yet, set the flag and added mode
                                            donationModeAdded = true;
                                            addedDonationMode = selectedPaymentMode;
                                        }

                                        if (currencyAdded) {
                                            if (Currency !== addedcurrency) {
                                                alert("You can only add rows with the same Currency.");
                                                return;
                                            }
                                        } else {
                                            // Currency not added yet, set the flag and added currency
                                            currencyAdded = true;
                                            addedcurrency = Currency;
                                        }

                                        // Add a new row to the table
                                        var bankDetails = {
                                            DonationMode: selectedPaymentMode,
                                            BankName: bankName,
                                            ChequeOrDraftDate: Cheuquedate,
                                            ChequeOrDraftNo: Cheuqueno,
                                            DepositeBankName: depositBank,
                                            DepositeDate: depositDate,
                                            CurrencyCode: Currency,
                                            Amount: amount,
                                            IsPdcCheque1: pdcCheque1,
                                            Doc: $("#hiddenTempFilename").val()
                                        };

                                        // Map property names if needed
                                        var mappedBankDetails = {
                                            DonationMode: bankDetails.DonationMode,
                                            BankName: bankDetails.BankName,
                                            ChequeOrDraftDate: bankDetails.ChequeOrDraftDate,
                                            ChequeOrDraftNo: bankDetails.ChequeOrDraftNo,
                                            DepositeBankName: bankDetails.DepositeBankName,
                                            DepositeDate: bankDetails.DepositeDate,
                                            CurrencyCode: bankDetails.CurrencyCode,
                                            Amount: bankDetails.Amount,
                                            IsPdcCheque1: bankDetails.IsPdcCheque1,
                                            Doc: $("#hiddenTempFilename").val()
                                            // Add more mappings as needed
                                        };

                                        addBankDetailsRow(mappedBankDetails);

                                        // Clear form fields
                                        $("#BankID1, #chequedate, #cheuqueno, #BankID2, #depositDate").val("");
                                        $("input[name='pdcCheque1']").prop("checked", false);

                                        updateTotalAmount();
                                        // Show the table after adding data
                                        $("#bankDetailsTable").show();
                                    });

                                    // Your existing code for handling row deletion and showing/hiding the table
                                    var temporaryFolder = '@temporaryFolder';

                                    // Function to add a new row to the bank details table
                                    function addBankDetailsRow(bankDetails) {
                                        var newRowBankAdd = "<tr>" +
                                            "<td>" + bankDetails.DonationMode + "</td>" +
                                            "<td>" + bankDetails.BankName + "</td>" +
                                            "<td>" + bankDetails.ChequeOrDraftDate + "</td>" +
                                            "<td>" + bankDetails.ChequeOrDraftNo + "</td>" +
                                            "<td>" + bankDetails.DepositeBankName + "</td>" +
                                            "<td>" + bankDetails.DepositeDate + "</td>" +
                                            "<td>" + bankDetails.CurrencyCode + "</td>" +
                                            "<td>" + bankDetails.Amount + "</td>" +
                                            "<td>" + bankDetails.IsPdcCheque1 + "</td>" +
                                            "<td><a href='" + temporaryFolder + "/" + bankDetails.Doc + "' target='_blank'>View</a></td>" +
                                            "<td style='display:none;' class='filename'>" + bankDetails.Doc + "</td>" +
                                            "<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>" +
                                            "</tr>";

                                        $("#bankDetailsTable tbody").append(newRowBankAdd);
                                        updateBankDetailsHiddenField();
                                        $("#DivTotalAmount").show();
                                    }

                                    function OnModeladdBankDetailsRow(bankDetails) {
                                        var MainFolder1 = '@rootUrl/DocDonationReceive';
                                        var newRowModelaAdd = "<tr>" +
                                            "<td>" + bankDetails.DonationMode + "</td>" +
                                            "<td>" + bankDetails.BankName + "</td>" +
                                            "<td>" + bankDetails.ChequeOrDraftDate + "</td>" +
                                            "<td>" + bankDetails.ChequeOrDraftNo + "</td>" +
                                            "<td>" + bankDetails.DepositeBankName + "</td>" +
                                            "<td>" + bankDetails.DepositeDate + "</td>" +
                                            "<td>" + bankDetails.CurrencyCode + "</td>" +
                                            "<td>" + bankDetails.Amount + "</td>" +
                                            "<td>" + bankDetails.IsPdcCheque1 + "</td>" +
                                            "<td><a href='" + MainFolder1 + "/" + bankDetails.Doc + "' target='_blank'>View</a></td>" +
                                            "<td style='display:none;' class='filename'>" + bankDetails.Doc + "</td>" +
                                            // "<td><button class='btn btn-danger btn-sm delete-row'>Delete</button></td>" +
                                            "</tr>";

                                        $("#bankDetailsTable tbody").append(newRowModelaAdd);
                                        updateBankDetailsHiddenField();
                                        // $("#DivTotalAmount").show();
                                    }

                                    $("#bankDetailsTable").on("click", ".delete-row", function () {
                                        // Reset the flag and added donation mode when a row is deleted
                                        donationModeAdded = false;
                                        addedDonationMode = null;
                                        currencyAdded = false;
                                        addedcurrency = true;

                                        $(this).closest("tr").remove();
                                        updateTotalAmount();
                                        updateBankDetailsHiddenField();
                                        // Hide the table if there is no data after deletion
                                        if ($("#bankDetailsTable tbody tr").length === 0) {
                                            $("#bankDetailsTable").hide();
                                        }
                                    });


                                    function updateBankDetailsHiddenField() {
                                        var tableData = [];
                                        $("#bankDetailsTable tbody tr").each(function () {
                                            var rowDatabankdetails = {
                                                DonationMode: $(this).find("td:eq(0)").text(),
                                                BankName: $(this).find("td:eq(1)").text(),
                                                ChequeDate: $(this).find("td:eq(2)").text(),
                                                ChequeNo: $(this).find("td:eq(3)").text(),
                                                DepositBank: $(this).find("td:eq(4)").text(),
                                                DepositDate: $(this).find("td:eq(5)").text(),
                                                Currency: $(this).find("td:eq(6)").text(),
                                                Amount: $(this).find("td:eq(7)").text(),
                                                PdcCheque: $(this).find("td:eq(8)").text(),
                                                TempDoc: $(this).find("td:eq(10)").text()
                                            };
                                            tableData.push(rowDatabankdetails);
                                        });

                                        // Store tableData in a hidden field
                                        $("#hiddenBankDetails").val(JSON.stringify(tableData));
                                    }

                                });
                            </script>
                        </div>
                    </div>
                </fieldset>

                <fieldset id="backOfficeFieldset" class="show border rounded p-3">
                    <legend style="font-weight: bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#backOfficeContent" aria-expanded="false" aria-controls="backOfficeContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Back Office ReceiveID Transaction</span>
                        </button>
                    </legend>

                    <div id="backOfficeContent" class="nested-form-container collapse">
                        <table id="depositTable" class="table table-bordered">
                            <thead>
                                <tr>

                                    <th>Deposit Mode</th>
                                    <th>Deposit Bank/Debit To Person/Shadhak</th>
                                    <th>Deposit Date</th>
                                    <th>Currency Code</th>
                                    <th>Deposit Amount</th>
                                    <th>BankID</th>
                                    <th>TransactionID</th>
                                    <th>Pay-In-Slip</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Table rows will be added dynamically here -->
                            </tbody>
                        </table>
                        <script>
                            $(document).ready(function () {
                                // Function to fill the table with data from model.DepositeDetailsListJson
                                function fillTableFromJson() {
                                    var jsonData = @Html.Raw(Model.DepositeDetailsListJson); // Parse JSON
                                    var tableBody = $('#depositTable tbody');

                                    // Clear existing rows
                                    tableBody.empty();
                                    var MainFolder1 = '@rootUrl/DocDonationReceive';
                                    // Iterate through JSON data and add rows to the table
                                    jsonData.forEach(function (item) {
                                        var newRowdepositeBank = '<tr>' +
                                            '<td>' + item.DepositeMode + '</td>' +
                                            '<td>' + item.DepositBank + '</td>' +
                                            '<td>' + new Date(item.DepositeDate).toLocaleDateString() + '</td>' +
                                            '<td>' + item.CurrencyCode + '</td>' +
                                            '<td>' + item.DepositeAmount.toFixed(2) + '</td>' +
                                            '<td>' + item.BankID + '</td>' +
                                            '<td>' + item.TransactionID + '</td>' +
                                            "<td><a href='" + MainFolder1 + "/" + item.DocPayInSlip + "' target='_blank'>View</a></td>" +
                                            '</tr>';
                                        tableBody.append(newRowdepositeBank);
                                    });

                                    // Show the table
                                    $('#depositTable').show();
                                    // Toggle the visibility of the fieldset based on the number of rows
                                    $('#backOfficeFieldset').toggle(tableBody.find('tr').length > 0);
                                }

                                // Call the function to fill the table on page load
                                fillTableFromJson();
                            });
                        </script>
                    </div>
                </fieldset>

                <fieldset class="show border rounded p-3">
                    <legend style="font-weight: bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#receiptDetailsContent" aria-expanded="false" aria-controls="receiptDetailsContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Receipt Details</span>
                        </button>
                    </legend>

                    <div id="receiptDetailsContent" class="nested-form-container collapse show">
                        <div class="row">

                            <script>
                                $(document).ready(function () {
                                    $('#headInput').change(function () {
                                        var selectedHead = $(this).val();
                                        $('#DivBhojanmitiDate').toggle(selectedHead === '150');


                                        var curid = $('#CurrencyID').val();
                                        if (curid === null || curid === undefined || curid.trim() === "") {
                                            alert('Please select Currency first.');
                                            return;
                                        }
                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetSubHeadByHead',
                                            type: 'GET',
                                            data: { HeadID: selectedHead, DataFlag: "GANGOTRI", CurrencyID: curid },
                                            success: function (response) {
                                                var data = response.data;

                                                $('#subHeadInput').empty();
                                                $('#subHeadInput').append('<option value="0">Select Purpose</option>');
                                                $.each(data, function (index, head) {
                                                    $('#subHeadInput').append('<option value="' + head.yojna_ID + '">' + head.yojna + '</option>');
                                                });

                                                // Show the second dropdown if needed
                                                // $('#subHeadInput').parent().show();
                                            },
                                            error: function (xhr, status, error) {
                                                console.log("AJAX error: " + error);
                                            }
                                        });
                                    });
                                });

                            </script>



                            <script>
                                $(document).ready(function () {
                                    // Apply Select2 to your dropdown element by its ID
                                    $('#subHeadInput').select2({
                                        theme: 'classic',
                                        width: '100%',

                                    });
                                    $('#autoQuantityInput').select2({
                                        theme: 'classic',
                                        width: '100%',

                                    });
                                    $('#BankID1').select2({
                                        theme: 'classic',
                                        width: '100%',

                                    });
                                    $('#BankID2').select2({
                                        theme: 'classic',
                                        width: '100%',

                                    });
                                    $('#Instruction').select2({
                                        theme: 'classic',
                                        width: '100%',

                                    });

                                    $('#Campaign').select2();
                                    $('#ID').select2();
                                    $('#headInput').select2({
                                        theme: 'classic',
                                        width: '100%',

                                    });
                                    $('#CityID').select2({
                                        theme: 'classic',
                                        width: '100%',

                                    });
                                    $(document).on('select2:open', function (e) {
                                        document.querySelector(`[aria-controls="select2-${e.target.id}-results"]`).focus();
                                    });
                                    $('#CityID2').select2({
                                        theme: 'classic',
                                        width: '100%',

                                    });
                                });

                            </script>

                            <style>
                                .select2-container--default .select2-selection--single {
                                    width: 100% !important; /* Adjust the width as needed */
                                    box-sizing: border-box;
                                }
                            </style>
                            <script>
                                $(document).ready(function () {
                                    var initialAmount = 0; // Variable to store the initial amount
                                    var curid = $('#CurrencyID').val();

                                    $('#subHeadInput').change(function () {
                                        var yojnaid = $(this).val();

                                        if (curid === null || curid === undefined || curid.trim() === "") {
                                            alert('Please select Currency first.');
                                            return;
                                        }

                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetQtyAmtBySubHead',
                                            type: 'GET',
                                            data: { YojnaID: yojnaid, DataFlag: "GANGOTRI", CurrencyID: curid },
                                            success: function (response) {
                                                var data = JSON.parse(response.data);

                                                handleQtyAmtResponse(data);
                                            },
                                            error: function (xhr, status, error) {
                                                console.log("AJAX error: " + error);
                                            }
                                        });
                                    });

                                    $('#receiveamount').on('input', function () {
                                        updateAnnounce();
                                    });

                                    $('#autoQuantityInput').change(function () {
                                        var selectedQuantityIndex = $(this).val();
                                        var selectedYojnaId = $('#subHeadInput').val();

                                        if (selectedYojnaId === "9" || selectedYojnaId === "662") {
                                            // If purpose ID is 2 or purpose text includes "operation"
                                            GetAmountForOperationHead(selectedQuantityIndex);
                                        } else {
                                            handleRegularQuantityChange(selectedQuantityIndex);
                                        }
                                        updateAnnounce();
                                    });

                                    function handleQtyAmtResponse(data) {
                                        // Clear existing options
                                        $('#autoQuantityInput').empty();

                                        if (data.length > 0) {
                                            // Store the initial amount for later use
                                            initialAmount = parseFloat(data[0].Amt);

                                            if (data[0].Start === 0) {
                                                // Disable quantity input if data.start is 0
                                                $('#autoQuantityInput').prop('disabled', true);
                                                enableReceiptAmount(); // Check and enable/disable ReceiptAmount based on initial amount
                                            } else {
                                                // Enable quantity input if data.start is not 0
                                                $('#autoQuantityInput').prop('disabled', false);

                                                // Generate options in multiples of data.start
                                                for (var i = data[0].Start; i <= 1500; i += data[0].Start) {
                                                    $('#autoQuantityInput').append('<option value="' + i + '">' + i + '</option>');
                                                }

                                                enableReceiptAmount(); // Check and enable/disable ReceiptAmount based on initial amount
                                            }

                                            // Set the initial amount in the ReceiptAmount input field
                                            $('#ReceiptAmount').val(initialAmount.toFixed(2));
                                            updateAnnounce();
                                        } else {
                                            $('#ReceiptAmount').val('');
                                        }
                                    }

                                    function handleRegularQuantityChange(selectedQuantityIndex) {
                                        var Qty = selectedQuantityIndex;
                                        var startingIndexText = $('#autoQuantityInput option:first').text();

                                        var SLimit = startingIndexText;
                                        var Amount = ((Qty / SLimit) * initialAmount).toFixed(2);
                                        $('#ReceiptAmount').val(Amount);
                                        updateAnnounce();
                                    }


                                    function enableReceiptAmount() {
                                        // Check if the initial amount is 1, then enable the ReceiptAmount input field
                                        if (initialAmount === 1) {
                                            $('#ReceiptAmount').prop('readonly', false);
                                            $('#autoQuantityInput').prop('disabled', true);
                                        } else {
                                            $('#ReceiptAmount').prop('readonly', true);
                                            $('#autoQuantityInput').prop('disabled', false);
                                        }
                                    }



                                    function updateAnnounce() {
                                        // Get the value of the receiveamount input
                                        var receiveAmount = parseFloat($('#receiveamount').val()) || 0;

                                        // Get the value of the ReceiptAmount input
                                        var receiptAmount = parseFloat($('#ReceiptAmount').val()) || 0;

                                        // Check if the receipt amount is greater than the receive amount
                                        if (receiptAmount > receiveAmount) {
                                            // Calculate the announce amount as the difference between receipt amount and initial amount
                                            var announceAmount = receiptAmount - receiveAmount;

                                            // Set the announce amount in the announceamount input field
                                            $('#announceamount').val(announceAmount.toFixed(2));
                                        } else {
                                            // If the receipt amount is not greater than the receive amount, set announce amount to 0
                                            $('#announceamount').val("0.00");
                                        }
                                    }

                                    function GetAmountForOperationHead(quantityIndex) {
                                        $.ajax({
                                            url: '/NationalGangotri/DonationReceiveMaster/GetOperationAmountByQty',
                                            type: 'GET',
                                            data: { Qty: quantityIndex, DataFlag: "GANGOTRI", CurrencyID: curid },
                                            success: function (response) {

                                                if (Array.isArray(response.data) && response.data.length > 0) {
                                                    var amountFromApi = response.data[0].Amount;
                                                    $('#ReceiptAmount').val(amountFromApi.toFixed(2));
                                                    updateAnnounce();
                                                } else {

                                                    var rate = 3610;
                                                    var Qty1 = quantityIndex - 101;
                                                    var startingIndexText = $('#autoQuantityInput option:first').text();

                                                    var Slimit = startingIndexText;
                                                    var Amount = (Math.floor(rate * (Qty1 / Slimit)) + 361000).toFixed(2);

                                                    $('#ReceiptAmount').val(Amount);
                                                    updateAnnounce();
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                console.log("AJAX error: " + error);
                                            }
                                        });
                                    }


                                });

                            </script>


                            @if (Model.ReceiveID == null)
                            {
                                <div class="row">
                                    <div class="form-group col-lg-2">
                                        <label for="head">Head</label>
                                        <select class="form-control" id="headInput" asp-for="Purpose_ID" name="Purpose_ID">
                                            <option value="0">Select Head</option>
                                            @if (Model != null)
                                            {
                                                @foreach (var heads in Model.HeadList)
                                                {
                                                    <option value="@heads.Purpose_ID">@heads.Purpose</option>
                                                }

                                            }
                                        </select>

                                    </div>

                                    <div class="form-group col-lg-2">
                                        <label for="subHead">Purpose</label>
                                        <select class="form-control" id="subHeadInput" name="subHead">
                                            <option value="0">Select Purpose</option>
                                        </select>
                                    </div>

                                    <div class="form-group col-lg-1">
                                        <label for="autoQuantity">Quantity</label>
                                        <select class="form-control" id="autoQuantityInput" name="autoQuantity">
                                            <option value="0">Select Qty</option>
                                        </select>
                                    </div>
                                    <div class="form-group col-lg-2" id="DivBhojanmitiDate" style="display:none">
                                        <label for="ReceiptAmount">Bhojan Miti Date</label>
                                        <input class="form-control" id="bhojanMitiDate" type="date" name="bhojanMitiDate">
                                    </div>

                                    <div class="form-group col-lg-2">
                                        <label for="ReceiptAmount">Amount</label>
                                        <input class="form-control" readonly id="ReceiptAmount" type="text" name="ReceiptAmount">
                                    </div>

                                    <div class="form-group col-lg-2">
                                        <label for="ReceiptAmount">Receive Amount</label>
                                        <input class="form-control" id="receiveamount" type="number" name="receiveamount">
                                    </div>
                                    <div class="form-group col-lg-2">
                                        <label for="ReceiptAmount">Announce Amount</label>
                                        <input class="form-control" id="announceamount" type="number" name="announceamount">
                                    </div>

                                    <div class="form-group col-lg-1">
                                        <br>
                                        <button class="btn btn-primary" id="addBtnReceipt"><i class="fas fa-plus"></i>Add</button>
                                    </div>
                                </div>
                            }
                            <div id="tableContainerPurpose" style="display: none;">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Head</th>
                                            <th>Purpose</th>
                                            <th>Quantity</th>
                                            <th>Purpose Amount</th>
                                            <th>Receive Amount</th>
                                            <th>Announce Amount</th>
                                            <th></th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="dataTablePurposeBody"></tbody>
                                </table>
                            </div>

                            <input type="hidden" id="jsonData" name="receiptdetailslist" asp-for="receiptdetailslist" />
                            <input type="hidden" id="hdnPurposetotalamount" />
                            <input type="hidden" id="hdnAnnounceTotalAmount" />

                            <script>
                                $(document).ready(function () {
                                    var tableBody = $("#dataTablePurposeBody");
                                    var tableContainer = $("#tableContainerPurpose");
                                    var jsonDataField = $("#jsonData");
                                    var totalAmountInput = $("#TotalAmount");
                                    var announceTotalInput = $("#hdnAnnounceTotalAmount");

                                    // Constants
                                    var SELECT_OPTION = "Select";
                                    var ERROR_MESSAGES = {
                                        ADD_AMOUNT_FIRST: "Please Add Donation Amount First.",
                                        FILL_ALL_FIELDS: "Please fill in all fields before adding.",
                                        TOTAL_AMOUNT_EXCEED: "Total amount in the Purpose cannot exceed the specified Donation Total Amount...!!!"
                                    };

                                    // Initialize table with data from the model
                                    var receiptsListJson = @Html.Raw(Model.ReceiptsListJson);
                                    if (receiptsListJson) {
                                        $.each(receiptsListJson, function (index, item) {
                                            var dateObject = item.BhojanMitiDate ? new Date(item.BhojanMitiDate) : null;

                                            var formattedDate = dateObject ? dateObject.toISOString().split('T')[0] : '';

                                            addTableRow(item.HeadName, item.SubHeadName, item.Quantity, item.Amount, item.ReceiveAmount, item.AnnounceAmount, formattedDate);
                                        });
                                        toggleTableVisibility();
                                        updateAnnounceTotal();
                                    }

                                    // Add row event handler
                                    $("#addBtnReceipt").click(function () {
                                        event.preventDefault();
                                        var head = $("#headInput option:selected").text();
                                        var purpose = $("#subHeadInput option:selected").text();
                                        var quantity = $("#autoQuantityInput").val();
                                        var amount = parseFloat($("#ReceiptAmount").val()) || 0;
                                        var receiveAmount = parseFloat($("#receiveamount").val()) || 0;
                                        var announceAmount = parseFloat($("#announceamount").val()) || 0;
                                        var TotalDonation = parseFloat(totalAmountInput.val()) || 0;
                                        var bhojanDate = $("#bhojanMitiDate").val();

                                        // Check if the sum of amounts is not greater than TotalAmount
                                        var currentTotal = getCurrentTotalAmount();
                                        var materialDepositId = $("#MaterialDepositID").val();

                                        addTableRow(head, purpose, quantity, amount, receiveAmount, announceAmount, bhojanDate);
                                        clearInputFields();
                                        updateHiddenField();
                                        updateAnnounceTotal();

                                    });

                                    // Delete row event handler
                                    tableBody.on("click", ".deleteBtn", function () {
                                        var announceAmount = parseFloat($(this).closest("tr").find("td:eq(5)").text()) || 0;
                                        $(this).closest("tr").remove();

                                        // Toggle table visibility based on row count
                                        toggleTableVisibility();

                                        // Update hidden field with JSON data
                                        updateHiddenField();

                                        // Update announce total
                                        updateAnnounceTotal(-announceAmount);
                                    });

                                    $("#clearTableBtn").click(function () {
                                        tableBody.empty();
                                        toggleTableVisibility();

                                        // Update hidden field with JSON data
                                        updateHiddenField();

                                        // Reset announce total
                                        announceTotalInput.val(0);
                                    });

                                    // Function to toggle table visibility based on row count
                                    function toggleTableVisibility() {
                                        tableContainer.toggle(tableBody.find("tr").length > 0);
                                    }

                                    // Function to get the current total amount in the table
                                    function getCurrentTotalAmount() {
                                        var currentTotal = 0;
                                        tableBody.find("tr").each(function () {
                                            var columns = $(this).find("td");
                                            var amount = parseFloat(columns.eq(3).text()) || 0;
                                            currentTotal += amount;
                                        });
                                        return currentTotal;
                                    }

                                    // Function to add a new row
                                    function addTableRow(head, purpose, quantity, amount, receiveAmount, announceAmount, bhojandate) {
                                        var newRowPurpose = `<tr>
                                                                                                                      <td>${head}</td>
                                                                                                                      <td>${purpose}</td>
                                                                                                                      <td>${quantity}</td>
                                                                                                                      <td>${amount.toFixed(2)}</td>
                                                                                                                      <td>${receiveAmount.toFixed(2)}</td>
                                                                                                                      <td>${announceAmount.toFixed(2)}</td>
                                                                                                                      <td>${bhojandate}</td>
                                                                                                                      <td><button class='btn btn-danger btn-sm deleteBtn'>Delete</button></td>
                                                                                                                    </tr>`;

                                        tableBody.append(newRowPurpose);
                                        toggleTableVisibility();
                                        updateHiddenField();
                                        updateAnnounceTotal(announceAmount);
                                    }

                                    // Function to clear input fields
                                    function clearInputFields() {
                                        $("#ReceiptAmount, #receiveamount, #announceamount, #DonationMode,#bhojanMitiDate").val("");
                                    }

                                    // Function to update the hidden field with JSON data
                                    function updateHiddenField() {
                                        var data = [];
                                        var totalAmount = 0;

                                        tableBody.find("tr").each(function () {
                                            var columns = $(this).find("td");
                                            var item = {
                                                "HeadName": columns.eq(0).text(),
                                                "Purpose": columns.eq(1).text(),
                                                "Quantity": columns.eq(2).text(),
                                                "Amount": columns.eq(3).text(),
                                                "ReceiveAmount": columns.eq(4).text(),
                                                "AnnounceAmount": columns.eq(5).text(),
                                                "BhojanMitiDate": columns.eq(6).text()
                                            };
                                            data.push(item);

                                            // Calculate total amount
                                            var amount = parseFloat(columns.eq(3).text()) || 0;
                                            totalAmount += amount;
                                        });

                                        // Convert data array to JSON string
                                        var jsonData = JSON.stringify(data);

                                        // Set JSON data to hidden field
                                        jsonDataField.val(jsonData);

                                        // Set total amount to the hidden field
                                        $("#hdnPurposetotalamount").val(totalAmount.toFixed(2));
                                    }

                                    // Function to update announce total
                                    function updateAnnounceTotal(announceAmount = 0) {
                                        var currentTotal = parseFloat(announceTotalInput.val()) || 0;
                                        var newTotal = currentTotal + announceAmount;
                                        announceTotalInput.val(newTotal.toFixed(2));
                                    }
                                });

                            </script>

                        </div>

                    </div>
                </fieldset>

                <fieldset class="show border rounded p-3">
                    <legen00d style="font-weight: bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#donorInstructionsContent" aria-expanded="false" aria-controls="donorInstructionsContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Donor Instructions</span>
                        </button>
                    </legen00d>

                    <div id="donorInstructionsContent" class="nested-form-container collapse">
                        <div class="row">
                            <div class="form-group col-lg-3" style="display:none;">
                                <label for="manavFormulaRequire">Manav Formula Require</label>
                                <div class="custom-control custom-radio">
                                    <input class="custom-control-input" type="radio" name="IsManavaFormulaRequire" id="manavFormulaYes" asp-for="IsManavaFormulaRequire" value="true" @(Model.IsManavaFormulaRequire.GetValueOrDefault() ? "checked" : "")>
                                    <label class="custom-control-label" for="manavFormulaYes">Yes</label>
                                </div>
                                <div class="custom-control custom-radio">
                                    <input class="custom-control-input" type="radio" name="IsManavaFormulaRequire" asp-for="IsManavaFormulaRequire" id="manavFormulaNo" value="false" @(Model.IsManavaFormulaRequire == false ? "checked" : "")>
                                    <label class="custom-control-label" for="manavFormulaNo">No</label>
                                </div>
                            </div>

                            <div class="form-group col-lg-3" style="display:none;">
                                <label for="patientsPhotoRequire">Patients Photo Require</label>
                                <div class="custom-control custom-radio">
                                    <input class="custom-control-input" type="radio" name="IsPatientsPhotoRequire" id="patientsPhotoYes" asp-for="IsPatientsPhotoRequire" value="true" @(Model.IsPatientsPhotoRequire.GetValueOrDefault() ? "checked" : "")>
                                    <label class="custom-control-label" for="patientsPhotoYes">Yes</label>
                                </div>
                                <div class="custom-control custom-radio">
                                    <input class="custom-control-input" type="radio" name="IsPatientsPhotoRequire" asp-for="IsPatientsPhotoRequire" id="patientsPhotoNo" value="false" @(Model.IsPatientsPhotoRequire == false ? "checked" : "")>
                                    <label class="custom-control-label" for="patientsPhotoNo">No</label>
                                </div>
                            </div>
                            <div class="form-group col-lg-4" style="display:none;">
                                <input type="checkbox" class="form-check-input" id="requireCheckbox" name="IfDiffrentAddressForDispatch" value="true" @(Model.IfDiffrentAddressForDispatch.GetValueOrDefault() ? "checked" : "") />
                                <input type="hidden" value="false" name="IfDiffrentAddressForDispatch" />
                                <label for="requireCheckbox">If the dispatch address is different, please fill in the address here.</label>

                                <input class="form-control" value="@Model.DifferentAddressToDispatch" type="text" placeholder="Address" oninput="convertToUpperCase(this)" name="DifferentAddressToDispatch" asp-for="DifferentAddressToDispatch" id="requireWithTextbox" style="@(Model.IfDiffrentAddressForDispatch.GetValueOrDefault() ? "display: block;" : "display: none;")">
                            </div>

                            <script>
                                document.getElementById('requireCheckbox').addEventListener('change', function () {
                                    var textbox = document.getElementById('requireWithTextbox');
                                    textbox.style.display = this.checked ? 'block' : 'none';
                                });

                                // Handle initial state when the page loads
                                window.addEventListener('DOMContentLoaded', function () {
                                    var checkbox = document.getElementById('requireCheckbox');
                                    var textbox = document.getElementById('requireWithTextbox');
                                    textbox.style.display = checkbox.checked ? 'block' : 'none';
                                });
                            </script>
                            @if (Model.ReceiveID == null)
                            {

                                <div class="form-group col-lg-5">
                                    <label for="instruction">Donor Instruction</label>
                                    <select class="form-control" asp-for="Instructions" id="Instruction" name="Instructions">
                                        <option value="0">Select Donor Instructions</option>
                                        @if (Model != null)
                                        {
                                            @foreach (var mod in Model.donorInstructionList)
                                            {
                                                <option value="@mod.REF_ID">@mod.InstructionName</option>
                                            }

                                        }
                                    </select>
                                </div>

                                <div class="form-group col-lg-5">
                                    <label for="remarks">Remarks</label>
                                    <textarea class="form-control" rows="1" asp-for="ReceiptRemarks" name="ReceiptRemarks" oninput="convertToUpperCase(this)" typeof="text" id="remarks"></textarea>

                                </div>
                                <div class="col-lg-2">
                                    <br />
                                    <button type="button" id="addRowBtn" class="btn btn-primary"><i class="fas fa-plus"></i>Add</button>

                                </div>

                            }
                            <table class="table table-bordered" id="instructionTable" style="display: none;">
                                <thead>
                                    <tr>
                                        <th>Donor Instruction</th>
                                        <th>Remarks</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rows will be dynamically added here -->
                                </tbody>
                            </table>
                            <input type="hidden" id="jsonDatafordonorInstruction" asp-for="donorInstructionjsonList" name="donorInstructionjsonList" />

                            <script>
                                $(document).ready(function () {
                                    // Initialize the table with data from the model
                                    var donorInstructionsListJson = @Html.Raw(Model.DonorInstructionsListJson);
                                    var instructionTableBody = $("#instructionTable tbody");
                                    var jsonDataField = $("#jsonDatafordonorInstruction");

                                    if (donorInstructionsListJson && donorInstructionsListJson.length > 0) {
                                        $.each(donorInstructionsListJson, function (index, item) {
                                            var newRowDonorInstruction = "<tr>" +
                                                "<td>" + item.InstructionName + "<input type='hidden' name='SelectedInstructions' value='" + item.InstructionId + "' /></td>" +
                                                "<td>" + item.Remarks + "</td>" +
                                                // "<td><button type='button' class='btn btn-danger deleteRowBtn'>Delete</button></td>" +
                                                "</tr>";
                                            instructionTableBody.append(newRowDonorInstruction);
                                        });
                                        toggleTableVisibility();
                                    }

                                    // Button click event
                                    $("#addRowBtn").click(function () {
                                        // Get selected values
                                        var selectedInstructionId = $("#Instruction").val();
                                        var selectedInstructionName = $("#Instruction option:selected").text();
                                        var remarks = $("#remarks").val();

                                        // Validate
                                        if (selectedInstructionId === "0") {
                                            alert("Please select a Donor Instruction.");
                                            return;
                                        }

                                        // Add row to the table
                                        var newRowDonorInstAdd = "<tr>" +
                                            "<td>" + selectedInstructionName + "<input type='hidden' name='SelectedInstructions' value='" + selectedInstructionId + "' /></td>" +
                                            "<td>" + remarks + "</td>" +
                                            "<td><button type='button' class='btn btn-danger deleteRowBtn'>Delete</button></td>" +
                                            "</tr>";

                                        instructionTableBody.append(newRowDonorInstAdd);

                                        // Update hidden field with JSON data
                                        updateHiddenField();

                                        // Clear input values
                                        $("#Instruction").val("0");
                                        $("#remarks").val("");

                                        // Show the table
                                        toggleTableVisibility();
                                    });

                                    // Handle delete button click within the table
                                    instructionTableBody.on("click", ".deleteRowBtn", function () {
                                        $(this).closest("tr").remove();

                                        // Update hidden field with JSON data
                                        updateHiddenField();

                                        // Hide the table if there are no rows
                                        toggleTableVisibility();
                                    });

                                    // Function to update the hidden field with JSON data
                                    function updateHiddenField() {
                                        var data = [];
                                        instructionTableBody.find("tr").each(function () {
                                            var columns = $(this).find("td");
                                            var item = {
                                                "InstructionId": $(columns.eq(0)).find("input[name='SelectedInstructions']").val(),
                                                "InstructionName": columns.eq(0).text(),
                                                "Remarks": columns.eq(1).text()
                                            };
                                            data.push(item);
                                        });

                                        // Convert data array to JSON string
                                        var jsonData = JSON.stringify(data);

                                        // Set JSON data to hidden field
                                        jsonDataField.val(jsonData);
                                    }

                                    // Function to toggle table visibility based on row count
                                    function toggleTableVisibility() {
                                        if (instructionTableBody.find("tr").length === 0) {
                                            $("#instructionTable").hide();
                                        } else {
                                            $("#instructionTable").show();
                                        }
                                    }
                                });
                            </script>

                        </div>
                    </div>

                </fieldset>

                <fieldset id="announceFieldset" class="show border rounded p-3" style="display:none;">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#announceDetailsContent" aria-expanded="false" aria-controls="announceDetailsContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Announce Due Installment Details</span>
                        </button>
                    </legend>

                    <div id="announceDetailsContent" class="nested-form-container collapse">
                        <div class="card-header text-center">
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="announcedue" name="IfAnnounceDueInFuture" value="true" @(Model.IfAnnounceDueInFuture ? "checked" : "") />
                                <input type="hidden" name="IfAnnounceDueInFuture" value="false" />
                                <label class="form-check-label" for="announcedue"> If Announce Due For Future Dates</label>
                            </div>
                            <script>
                                $(document).ready(function () {
                                    var announceCheckbox = $("#announcedue");
                                    var announceFieldset = $("#announceFieldset");

                                    announceCheckbox.on("change", function () {
                                        announceFieldset.toggle(this.checked);


                                        if (!this.checked) {
                                            $("#announceTable").hide();
                                        }
                                    });

                                    announceCheckbox.change();

                                    var tableBody = $("#tableBody");

                                    $("#btn").on("click", function () {
                                        var newRowaddclick = $("<tr>");
                                        // Add your row creation logic here
                                        tableBody.append(newRowaddclick);

                                        // Clear input fields
                                        $("#totalPurposeAmount, #receiveAmount, #dueAmount, #announceId, #amount, #date1").val("");

                                        // Show the table
                                        $("#announceTable").show();
                                    });
                                });
                            </script>
                        </div>

                        @if (Model.ReceiveID == null)
                        {
                            <div class="row">
                                <div class="form-group col-lg-3">
                                    <label for="announceId">Announce ID</label>
                                    <input type="number" class="form-control" id="announceIdAnnounce" />
                                </div>
                                <div class="form-group col-lg-3">
                                    <label>Announcer Name</label>
                                    <input type="text" class="form-control" id="AnnouncerName" />
                                </div>
                                <div class="form-group col-lg-3">
                                    <label for="dueAmount">Due Amount</label>
                                    <input type="number" class="form-control" id="dueAmountAnnounce" />
                                </div>

                                <div class="form-group col-lg-2">
                                    <label for="date1">Due Date</label>
                                    <input type="date" class="form-control" id="dateAnnounce" />
                                </div>
                                <div class="form-group col-lg-1">
                                    <br />
                                    <button class="btn btn-primary" id="btnAddAnnounce"><span class="fa fa-plus"></span>Add</button>
                                </div>
                            </div>
                        }
                        <div class="row">
                            <table class="table table-bordered" id="announceTable" style="display: none;">
                                <thead>
                                    <tr>
                                        <th>Announce ID</th>
                                        <th>Announcer Name</th>
                                        <th>Due Amount</th>
                                        <th>Due Date</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="tableBodyAnnounce">
                                    <!-- Table rows will be added dynamically here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </fieldset>
                <input type="hidden" id="announceData" asp-for="AnnounceDetsilsList" name="AnnounceDetsilsList" />
                <script>
                    $(document).ready(function () {
                        var tableBody = $("#tableBodyAnnounce");
                        var jsonDataField = $("#announceData");

                        // Initialize table with data from the model
                        var announceDetailsListJson = @Html.Raw(Model.AnnounceDetailsListJson);
                        if (announceDetailsListJson) {
                            $.each(announceDetailsListJson, function (index, item) {
                                var newRowannouncebind = $("<tr>");
                                newRowannouncebind.append("<td>" + item.AnnunceID + "</td>");
                                newRowannouncebind.append("<td>" + item.AnnouncerName + "</td>");
                                newRowannouncebind.append("<td>" + item.DueAmount + "</td>");
                                newRowannouncebind.append("<td>" + new Date(item.date).toLocaleDateString() + "</td>");
                                newRowannouncebind.append("<td><button class='btn btn-danger btn-sm delete-row-announce'>Delete</button></td>");
                                tableBody.append(newRowannouncebind);
                            });
                            toggleTableVisibility();
                        }

                        $("#btnAddAnnounce").on("click", function () {
                            event.preventDefault();
                            var newRowAddAnnounce = $("<tr>");
                            newRowAddAnnounce.append("<td>" + $("#announceIdAnnounce").val() + "</td>");
                            newRowAddAnnounce.append("<td>" + $("#AnnouncerName").val() + "</td>");
                            newRowAddAnnounce.append("<td>" + $("#dueAmountAnnounce").val() + "</td>");
                            newRowAddAnnounce.append("<td>" + $("#dateAnnounce").val() + "</td>");
                            newRowAddAnnounce.append("<td><button class='btn btn-danger btn-sm delete-row-announce'>Delete</button></td>");

                            tableBody.append(newRowAddAnnounce);

                            // Clear input fields
                            $("#announceIdAnnounce, #AnnouncerName, #dueAmountAnnounce, #dateAnnounce").val("");

                            // Show the table
                            $("#announceTable").show();

                            // Update JSON in hidden field after row addition
                            updateHiddenField();
                        });

                        // Delete row when the delete button is clicked
                        tableBody.on("click", ".delete-row-announce", function () {
                            $(this).closest("tr").remove();

                            // Hide the table if there are no rows
                            toggleTableVisibility();

                            // Update JSON in hidden field after row deletion
                            updateHiddenField();
                        });

                        // Function to update the hidden field with JSON data
                        function updateHiddenField() {
                            var announceData = [];

                            tableBody.find('tr').each(function () {
                                var row = $(this);
                                var rowDataannounce = {
                                    AnnounceId: row.find('td:eq(0)').text(),
                                    AnnouncerName: row.find('td:eq(1)').text(),
                                    DueAmount: row.find('td:eq(2)').text(),
                                    DueDate: row.find('td:eq(3)').text()
                                };
                                announceData.push(rowDataannounce);
                            });

                            // Convert data array to JSON string
                            var jsonData = JSON.stringify(announceData);

                            // Set JSON data to hidden field
                            jsonDataField.val(jsonData);
                        }

                        // Function to toggle table visibility based on row count
                        function toggleTableVisibility() {
                            if (tableBody.find("tr").length === 0) {
                                $("#announceTable").hide();
                            } else {
                                $("#announceTable").show();
                            }
                        }
                    });
                </script>

                <fieldset class="show border rounded p-3" style="display:none">
                    <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                        <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#scanCopyContent" aria-expanded="false" aria-controls="scanCopyContent">
                            <span id="collapseIcon" class="">&#43;</span>
                            <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">Attach Scan Copy</span>
                        </button>
                    </legend>
                    <div id="scanCopyContent" class="nested-form-container collapse">
                        <style>
                            .file-preview {
                                position: relative;
                                max-width: 100%;
                                height: auto;
                                text-align: center;
                            }

                            .img-preview {
                                max-width: 100%;
                                max-height: 200px; /* Set a fixed height for the image preview */
                                display: none;
                                margin: 0 auto; /* Center the image horizontally */
                            }

                            .pdf-view {
                                width: 100%;
                                height: 200px; /* Set a fixed height for the PDF preview */
                                display: none;
                            }
                        </style>

                        <div class="row">



                            <div class="form-group col-lg-4" style="display:none;" data-input-id="file2">
                                <label for="file2">Attach Cheque</label>

                                @if (!string.IsNullOrEmpty(Model.Doc2))
                                {
                                    <div><a class="btn btn-outline-primary" target="_blank" href="/DocDonationReceive/@Model.Doc2"><i class="fa fa-eye"></i>View</a></div>
                                }
                                else
                                {
                                    <input type="file" name="DocCheque" asp-for="DocCheque" id="file2" accept="image/*,application/pdf" />
                                }
                            </div>

                            <div class="form-group col-lg-4" style="display:none;" data-input-id="file3">
                                <label for="file3">Attach Pay-In-Slip</label>

                                @if (!string.IsNullOrEmpty(Model.Doc3))
                                {
                                    <div><a class="btn btn-outline-primary" target="_blank" href="/DocDonationReceive/@Model.Doc3"><i class="fa fa-eye"></i>View</a></div>
                                }
                                else
                                {
                                    <input type="file" name="DocPayInSlip" asp-for="DocPayInSlip" id="file3" accept="image/*,application/pdf" />
                                }
                            </div>

                        </div>


                    </div>
                </fieldset>
                @if (Model.ReceiveID != null)
                {
                    <fieldset class="show border rounded p-3 your-custom-class">
                        <legend style="font-weight:bold;" class="d-flex justify-content-between align-items-center text-left">
                            <button class="btn btn-link collapse-icon" type="button" data-toggle="collapse" data-target="#receiveIdMovementDetailsContent" aria-expanded="false" aria-controls="receiveIdMovementDetailsContent">
                                <span id="collapseIcon" class="">&#43;</span>
                                <span style="font-size: larger;color:#1cb8a1;font-weight:bold;font-weight:bold;">ReceiveID Movement Details</span>
                            </button>
                        </legend>

                        <div id="receiveIdMovementDetailsContent" class="row nested-form-container collapse">

                            <table id="movementTable" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Sr.No.</th>
                                        <th>Receive ID</th>
                                        <th>Movement From</th>
                                        <th>Movement To</th>
                                        <th>User ID</th>
                                        <th>User Name</th>
                                        <th>Created On</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Table rows will be added dynamically here -->
                                </tbody>
                            </table>
                            <script>
                                $(document).ready(function () {
                                    function fillTableFromJson() {
                                        var jsonData = @Html.Raw(Model.MovementMasterListJson); // Parse JSON
                                        var tableBody = $('#movementTable tbody');

                                        // Clear existing rows
                                        tableBody.empty();
                                        var srno = 1;
                                        // Iterate through JSON data and add rows to the table
                                        jsonData.forEach(function (item) {
                                            var newRowMovement = '<tr>' +
                                                '<td>' + srno++ + '</td>' +
                                                '<td>' + item.ReceiveID + '</td>' +
                                                '<td>' + item.MovementFrom + '</td>' +
                                                '<td>' + item.MovementTo + '</td>' +
                                                '<td>' + item.UserID + '</td>' +
                                                '<td>' + item.UserName + '</td>' +
                                                '<td>' + new Date(item.CreatedOn).toLocaleString() + '</td>' +
                                                '</tr>';
                                            tableBody.append(newRowMovement);
                                        });

                                        // Show the table
                                        $('#movementTable').show();
                                    }

                                    // Call the function to fill the table on page load
                                    fillTableFromJson();
                                });
                            </script>

                        </div>
                    </fieldset>

                }

                <br />
                <div class="container-lg">
                    <div class="text-center">
                        <script>
                            function validateAmount() {
                                var totalAmount = parseFloat($("#hdnTotalAmount").val());
                                var purposeTotalAmount = parseFloat($("#hdnPurposetotalamount").val());

                                // Check if the totalAmount is neither less nor greater than purposeTotalAmount
                                if (totalAmount === purposeTotalAmount) {

                                    return true; // Allow form submission
                                } else {
                                    alert("Total Donation amount must be equal to the purpose total amount.");
                                    return false; // Prevent form submission
                                }
                            }
                        </script>

                        @{
                            string BtnName = string.Empty;
                            string viewParam = Context.Request.Query["view"];
                            bool isViewEnabled = !string.IsNullOrEmpty(viewParam) && viewParam.ToLower() == "true";

                            string editParam = Context.Request.Query["edit"];
                            bool isEditEnabled = !string.IsNullOrEmpty(editParam) && editParam.ToLower() == "true";

                            if (isEditEnabled)
                            {
                                BtnName = "Update";
                            }
                            else
                            {
                                BtnName = "Submit";
                            }
                        }

                        <button type="submit" class="btn btn-success" style="@(isViewEnabled ? "display:none;" : "")">
                            <i class="fas fa-check"></i>@BtnName
                        </button>


                        <a href="@Url.Action("PrintProvisionalReceipt", "DonationReceiveMaster", new { refid = Model.ReceiveID })" class="btn btn-secondary">
                            <i class="fas fa-print"></i> Print
                        </a>  <button type="reset" class="btn btn-warning"><i class="fas fa-undo"></i> CIT</button>
                        <button type="reset" class="btn btn-danger">Cancel</button>
                        <a title="Go Back Home" href="/Gangotri/Home" class="btn btn-warning"><i class="fas fa-arrow-left"></i> Back</a>
                    </div>
                </div>

            </form>
        </div>
    </div>
</body>
</html>


